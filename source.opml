<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- OPML generated by OPML Editor v10.1b19 on Fri, 19 Apr 2024 15:59:14 GMT -->

<!-- 
   Hi this is Dave Winer. I write all my project code in an outliner, which 
   generates all the files that make up this GitHub project. You'll see a 
   source.opml file like this in each of my projects. It contains the outline 
   source that the repo files were generated from. This is the most logical place 
   to store them. You can read the code in any outliner that supports OPML, which 
   includes https://drummer.land. You can use the Open URL command in 
   Drummer's File menu to open the "raw" version of this file straight from the 
   GitHub repo.
 -->

<opml version="2.0">
	<head>
		<title>nodeEditor: drummerCms</title>
		<dateCreated>Tue, 10 Aug 2021 15:43:25 GMT</dateCreated>
		<dateModified>Fri, 19 Apr 2024 15:59:14 GMT</dateModified>
		<ownerName>Dave Winer</ownerName>
		<ownerId>http://davewiner.com/</ownerId>
		<expansionState>1, 6, 13, 23, 25, 71, 72, 73, 75, 79, 95, 98, 99, 106, 107, 110, 114, 118, 126, 129, 137, 145, 160, 171, 174</expansionState>
		<vertScrollState>95</vertScrollState>
		<windowTop>64</windowTop>
		<windowLeft>996</windowLeft>
		<windowBottom>1143</windowBottom>
		<windowRight>2226</windowRight>
		</head>
	<body>
		<outline text="/scripting.com/code/drummercms/">
			<outline text="worknotes.md" created="Mon, 09 Aug 2021 15:13:29 GMT">
				<outline text="#### 4/14/24; 11:19:24 AM by DW" created="Sun, 14 Apr 2024 15:19:23 GMT">
					<outline text="Blogroll support. " created="Sun, 14 Apr 2024 15:19:24 GMT"/>
					<outline text="Look for startBlogroll." created="Mon, 15 Apr 2024 14:07:35 GMT"/>
					</outline>
				<outline text="#### 8/9/23; 3:23:10 PM by DW" created="Wed, 09 Aug 2023 19:23:07 GMT">
					<outline text="Support for wordpress." created="Wed, 09 Aug 2023 19:23:11 GMT"/>
					</outline>
				<outline text="#### 7/31/23; 6:04:00 PM by DW -- v0.5.0" created="Mon, 31 Jul 2023 22:03:54 GMT">
					<outline text="The URL of the changenotes outline changed to:" created="Mon, 31 Jul 2023 22:04:01 GMT">
						<outline text="https://drummer.land/dave.winer@gmail.com/feedland/changenotes/changes.opml" created="Mon, 31 Jul 2023 22:04:09 GMT"/>
						</outline>
					</outline>
				<outline text="#### 4/20/23; 12:00:26 PM by DW" created="Thu, 20 Apr 2023 16:00:24 GMT">
					<outline text="Made it work with FeedLand as a linkblog tool." created="Thu, 20 Apr 2023 16:00:26 GMT"/>
					</outline>
				<outline text="#### 4/9/23; 12:41:56 PM by DW" created="Sun, 09 Apr 2023 16:41:56 GMT">
					<outline text="Added support for embedding Mastodon toots. " created="Sun, 09 Apr 2023 16:41:57 GMT"/>
					</outline>
				<outline text="#### 2/25/23; 3:32:48 PM by DW" created="Sat, 25 Feb 2023 20:32:47 GMT">
					<outline text="Changed config.defaultTemplate to the minimal template. The tabs weren't showing up on new blogs, this is because we were using an old version of the template. Why that changed between the two installations remains a mystery." created="Sat, 25 Feb 2023 20:32:50 GMT"/>
					</outline>
				<outline text="#### 2/21/23; 9:58:53 PM by DW" created="Wed, 22 Feb 2023 02:58:52 GMT">
					<outline text="Set it up to work with Drummer in its new location -- drummer.land." created="Wed, 22 Feb 2023 02:58:53 GMT"/>
					</outline>
				<outline text="#### 10/29/21; 9:15:58 AM by DW" created="Fri, 29 Oct 2021 13:15:58 GMT">
					<outline text="To deploy to Palatka, open the build script and set flDeploy to true in the header, and run it." created="Fri, 29 Oct 2021 13:15:58 GMT">
						<outline text="nodeEditorSuite.utilities.buildDrummerCms" created="Fri, 29 Oct 2021 13:16:05 GMT"/>
						</outline>
					</outline>
				<outline text="#### 10/14/21 by DW" created="Thu, 14 Oct 2021 13:59:25 GMT">
					<outline text="Added support for urlBlogWebsite head-level attribute. " created="Thu, 14 Oct 2021 13:59:39 GMT"/>
					</outline>
				<outline text="#### 9/4/21 by DW" created="Sat, 04 Sep 2021 15:14:47 GMT">
					<outline text="Provision for special outlines, where the OPML comes from somewhere else, and the output is uploaded to another S3 location." created="Sat, 04 Sep 2021 15:14:55 GMT"/>
					</outline>
				<outline text="#### 9/2/21 by DW" created="Thu, 02 Sep 2021 19:43:19 GMT">
					<outline text="A couple of weeks ago I basically took the Scripting News template and ran the Drummer blogs through it.  " created="Thu, 02 Sep 2021 19:43:55 GMT"/>
					<outline text="I spent a couple of days cleaning up and simplifying the template, adding tabs for a blog, linkblog and about outline, and removing functionality that didn't prove useful for Scripting News. At times there were tabs for chat, a river of news, others.  " created="Thu, 02 Sep 2021 19:45:19 GMT"/>
					<outline text="The template is in a templates folder here, with space for more templates to be added. " created="Thu, 02 Sep 2021 19:46:15 GMT"/>
					</outline>
				<outline text="#### 8/9/21; 11:13:35 AM by DW" created="Mon, 09 Aug 2021 15:13:33 GMT">
					<outline text="An old school for drummer users." created="Mon, 09 Aug 2021 15:13:36 GMT"/>
					</outline>
				</outline>
			<outline text="package.json" created="Mon, 09 Aug 2021 15:13:53 GMT">
				<outline text="{">
					<outline text="&quot;name&quot;: &quot;drummercms&quot;,"/>
					<outline text="&quot;version&quot;: &quot;0.5.1&quot;, "/>
					<outline text="&quot;author&quot;: &quot;Dave Winer &lt;dave@scripting.com&gt;&quot;,"/>
					<outline text="&quot;license&quot;: &quot;MIT&quot;,"/>
					<outline text="&quot;repository&quot;: {">
						<outline text="&quot;type&quot;: &quot;git&quot;,"/>
						<outline text="&quot;url&quot;: &quot;https://github.com/scripting/drummerCms.git&quot;"/>
						<outline text="},"/>
						</outline>
					<outline text="&quot;main&quot;: &quot;drummercms.js&quot;,"/>
					<outline text="&quot;files&quot;: [">
						<outline text="&quot;drummercms.js&quot;"/>
						<outline text="],"/>
						</outline>
					<outline text="&quot;dependencies&quot; : {">
						<outline text="&quot;request&quot;: &quot;*&quot;," created="Mon, 09 Aug 2021 16:59:39 GMT"/>
						<outline text="&quot;daveutils&quot;: &quot;*&quot;,"/>
						<outline text="&quot;davehttp&quot;: &quot;*&quot;,"/>
						<outline text="&quot;opml&quot;: &quot;*&quot;," created="Mon, 09 Aug 2021 16:12:10 GMT"/>
						<outline text="&quot;oldschoolblog&quot;: &quot;*&quot;"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="drummercms.js">
				<outline text="var myVersion = &quot;0.5.1&quot;, myProductName = &quot;drummerCms&quot;;  " created="Mon, 03 Feb 2014 03:21:03 GMT" pgfnum="36831"/>
				<outline text="" created="Tue, 10 Aug 2021 14:57:54 GMT"/>
				<outline text="const fs = require (&quot;fs&quot;);  "/>
				<outline text="const request = require (&quot;request&quot;);  "/>
				<outline text="const utils = require (&quot;daveutils&quot;);"/>
				<outline text="const davehttp = require (&quot;davehttp&quot;);  "/>
				<outline text="const opml = require (&quot;opml&quot;); "/>
				<outline text="const oldschool = require (&quot;oldschoolblog&quot;);"/>
				<outline text="const oldschool = require (&quot;./lib/oldschool.js&quot;);" isComment="true"/>
				<outline text="" created="Mon, 09 Aug 2021 15:56:01 GMT"/>
				<outline text="var config = {" created="Mon, 09 Aug 2021 15:59:14 GMT">
					<outline text="port: process.env.PORT || 1410,"/>
					<outline text="flLogToConsole: true,"/>
					<outline text="flAllowAccessFromAnywhere: true,"/>
					<outline text="defaultDescription: &quot;&quot;," created="Wed, 11 Aug 2021 16:47:04 GMT"/>
					<outline text="defaultHeaderImage: &quot;http://scripting.com/images/2021/08/02/joeDiMaggio.png&quot;," created="Wed, 11 Aug 2021 16:47:38 GMT"/>
					<outline text="defaultCopyright: &quot;&quot;," created="Wed, 11 Aug 2021 19:30:51 GMT"/>
					<outline text="" created="Sat, 25 Feb 2023 20:32:02 GMT"/>
					<outline text="defaultTemplate: &quot;http://scripting.com/code/drummercms/templates/minimal/index.html&quot;, //2/25/23 by DW" created="Thu, 12 Aug 2021 14:23:14 GMT"/>
					<outline text="defaultTemplate: &quot;http://scripting.com/code/drummercms/template/index.html&quot;," isComment="true" created="Thu, 12 Aug 2021 14:23:14 GMT"/>
					<outline text="" created="Sat, 25 Feb 2023 20:32:03 GMT"/>
					<outline text="appDomain: &quot;oldschool.scripting.com&quot;, //10/12/21 by DW" created="Tue, 12 Oct 2021 20:23:47 GMT"/>
					<outline text="s3BasePath: &quot;/oldschool.scripting.com/&quot;, //10/12/21 by DW" created="Tue, 12 Oct 2021 20:26:54 GMT"/>
					<outline text="s3BaseUrl:  &quot;http://oldschool.scripting.com/&quot;, //10/12/21 by DW" created="Tue, 12 Oct 2021 20:29:58 GMT"/>
					<outline text="drummerHome: &quot;http://drummer.land/&quot;, //2/21/23 by DW" created="Wed, 22 Feb 2023 03:00:53 GMT"/>
					<outline text="specialOutlines: { //9/4/21 by DW" created="Sat, 04 Sep 2021 13:30:58 GMT">
						<outline text="changenotes: {" created="Sat, 04 Sep 2021 13:31:13 GMT">
							<outline text="urlBlogOpml: &quot;https://drummer.land/dave.winer@gmail.com/feedland/changenotes/changes.opml&quot;," created="Sat, 04 Sep 2021 13:31:25 GMT"/>
							<outline text="urlBlogOpml: &quot;http://drummer.scripting.com/davewiner/drummer/changeNotes.opml&quot;," isComment="true" created="Sat, 04 Sep 2021 13:31:25 GMT"/>
							<outline text="basePath: &quot;/scripting.com/drummer/blog/&quot;," created="Sat, 04 Sep 2021 13:57:36 GMT"/>
							<outline text="baseUrl: &quot;http://scripting.com/drummer/blog/&quot;" created="Sat, 04 Sep 2021 13:57:36 GMT"/>
							<outline text="}" created="Sat, 04 Sep 2021 13:31:20 GMT"/>
							</outline>
						<outline text="}" created="Sat, 04 Sep 2021 13:31:08 GMT"/>
						</outline>
					<outline text="};" created="Mon, 09 Aug 2021 15:59:20 GMT"/>
					</outline>
				<outline text="var oldSchoolConfig = {" created="Mon, 09 Aug 2021 15:45:35 GMT">
					<outline text="flHttpEnabled: false" created="Mon, 09 Aug 2021 15:46:20 GMT"/>
					<outline text="};" created="Mon, 09 Aug 2021 15:45:40 GMT"/>
					</outline>
				<outline text="const fnameConfig = &quot;config.json&quot;;" created="Mon, 09 Aug 2021 15:57:41 GMT"/>
				<outline text="" created="Mon, 09 Aug 2021 16:06:23 GMT"/>
				<outline text="function httpRequest (url, timeout, headers, callback) {">
					<outline text="request (url, function (err, response, data) {">
						<outline text="if (err) {" created="Sun, 08 Aug 2021 15:33:13 GMT">
							<outline text="callback (err);" created="Sun, 08 Aug 2021 15:33:17 GMT"/>
							<outline text="}" created="Sun, 08 Aug 2021 15:33:20 GMT"/>
							</outline>
						<outline text="else {" created="Sun, 08 Aug 2021 15:33:21 GMT">
							<outline text="if (response.statusCode != 200) {" created="Sun, 08 Aug 2021 15:33:23 GMT">
								<outline text="const message = &quot;The request returned a status code of &quot; + response.statusCode + &quot;.&quot;;" created="Sun, 08 Aug 2021 15:34:06 GMT"/>
								<outline text="callback ({message});" created="Sun, 08 Aug 2021 15:34:43 GMT"/>
								<outline text="}" created="Sun, 08 Aug 2021 15:33:28 GMT"/>
								</outline>
							<outline text="else {" created="Sun, 08 Aug 2021 15:33:29 GMT">
								<outline text="callback (undefined, data) "/>
								<outline text="}" created="Sun, 08 Aug 2021 15:33:31 GMT"/>
								</outline>
							<outline text="}" created="Sun, 08 Aug 2021 15:33:33 GMT"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function initBlogConfig (blogName, urlOpml, basePath, baseUrl, theOutline, wordpressConfig, callback) {" created="Tue, 10 Aug 2021 14:49:51 GMT">
					<outline text="Changes" isComment="true" created="Sun, 29 Aug 2021 22:10:16 GMT">
						<outline text="8/9/23; 3:52:19 PM by DW" created="Wed, 09 Aug 2023 19:52:18 GMT">
							<outline text="New param wordpressConfig." created="Wed, 09 Aug 2023 19:52:19 GMT"/>
							</outline>
						<outline text="10/20/21; 9:14:06 AM by DW" created="Wed, 20 Oct 2021 13:14:05 GMT">
							<outline text="Jack Baty reports that when he changed urlBlogWebsite, baseUrl wasn't changing. That's because we were only setting that value when the config struct is created for the blog, not when it's updated. I went through the other values and found they were all being set correctly except for timeZoneOffset which I also fixed. " created="Wed, 20 Oct 2021 13:14:33 GMT">
								<outline text="https://github.com/scripting/drummerSupport/issues/67#issuecomment-947634406" created="Wed, 20 Oct 2021 13:15:47 GMT"/>
								</outline>
							</outline>
						<outline text="10/14/21; 7:40:38 AM by DW" created="Thu, 14 Oct 2021 11:40:38 GMT">
							<outline text="If baseUrl doesn't end with a / add it." created="Thu, 14 Oct 2021 11:40:38 GMT"/>
							</outline>
						<outline text="10/13/21; 4:38:08 PM by DW" created="Wed, 13 Oct 2021 20:38:07 GMT">
							<outline text="Add support for timeZoneOffset head-level attribute. " created="Wed, 13 Oct 2021 20:38:08 GMT"/>
							</outline>
						<outline text="10/13/21; 10:52:28 AM by DW" created="Wed, 13 Oct 2021 14:52:27 GMT">
							<outline text="If there's a urlBlogWebsite head-level attribute, we use that instead of baseUrl when rendering the blog." created="Wed, 13 Oct 2021 14:52:28 GMT"/>
							</outline>
						<outline text="10/12/21; 4:32:42 PM by DW" created="Tue, 12 Oct 2021 20:32:41 GMT">
							<outline text="Use new config options for s3BasePath and s3BaseUrl." created="Tue, 12 Oct 2021 20:32:42 GMT"/>
							</outline>
						<outline text="9/4/21; 9:39:16 AM by DW" created="Sat, 04 Sep 2021 13:39:16 GMT">
							<outline text="New params, urlOpml and basePath. Let the caller specify these so we can render special blogs in special places." created="Sat, 04 Sep 2021 13:39:17 GMT"/>
							</outline>
						<outline text="8/30/21; 1:14:10 PM by DW" created="Mon, 30 Aug 2021 17:14:09 GMT">
							<outline text="New head-level attribute -- flOldSchoolUseCache." created="Mon, 30 Aug 2021 17:14:10 GMT"/>
							</outline>
						<outline text="8/29/21; 6:10:18 PM by DW" created="Sun, 29 Aug 2021 22:10:17 GMT">
							<outline text="We were adding an extra slash at the end of the link element." created="Sun, 29 Aug 2021 22:10:19 GMT"/>
							</outline>
						</outline>
					<outline text="var oldschoolConfig = oldschool.getConfig ();" created="Tue, 10 Aug 2021 13:42:11 GMT"/>
					<outline text="var theConfig = oldschoolConfig.blogs [blogName];" created="Tue, 10 Aug 2021 14:50:39 GMT"/>
					<outline text="function copyAllHeadElements () {" created="Wed, 11 Aug 2021 19:23:20 GMT">
						<outline text="for (var x in theOutline.opml.head) { //make all values from the head available to the template" created="Wed, 11 Aug 2021 22:02:52 GMT">
							<outline text="theOutline.opml.head [x] = theOutline.opml.head [x];" created="Wed, 11 Aug 2021 22:03:05 GMT"/>
							<outline text="}" created="Wed, 11 Aug 2021 22:02:57 GMT"/>
							</outline>
						<outline text="}" created="Wed, 11 Aug 2021 19:23:25 GMT"/>
						</outline>
					<outline text="function getValueFromOpmlHead (name, defaultValue) {" created="Tue, 10 Aug 2021 20:00:59 GMT">
						<outline text="if (theOutline.opml.head [name] === undefined) {" created="Tue, 10 Aug 2021 20:01:50 GMT">
							<outline text="return (defaultValue);" created="Tue, 10 Aug 2021 20:02:19 GMT"/>
							<outline text="}" created="Tue, 10 Aug 2021 20:02:24 GMT"/>
							</outline>
						<outline text="else {" created="Tue, 10 Aug 2021 20:02:31 GMT">
							<outline text="return (theOutline.opml.head [name]);" created="Tue, 10 Aug 2021 20:02:33 GMT"/>
							<outline text="}" created="Tue, 10 Aug 2021 20:02:36 GMT"/>
							</outline>
						<outline text="}" created="Tue, 10 Aug 2021 20:01:43 GMT"/>
						</outline>
					<outline text="var title = getValueFromOpmlHead (&quot;title&quot;, blogName + &quot;'s blog&quot;);" created="Tue, 10 Aug 2021 14:53:40 GMT"/>
					<outline text="var description = getValueFromOpmlHead (&quot;description&quot;, config.defaultDescription);" created="Tue, 10 Aug 2021 14:53:40 GMT"/>
					<outline text="var copyright = getValueFromOpmlHead (&quot;copyright&quot;, config.defaultCopyright);" created="Tue, 10 Aug 2021 14:53:40 GMT"/>
					<outline text="var urlHeaderImage = getValueFromOpmlHead (&quot;urlHeaderImage&quot;, config.defaultHeaderImage);" created="Tue, 10 Aug 2021 14:53:40 GMT"/>
					<outline text="var urlTemplate = getValueFromOpmlHead (&quot;urlTemplate&quot;, config.defaultTemplate);" created="Tue, 10 Aug 2021 14:53:40 GMT"/>
					<outline text="var urlHomePageTemplate = getValueFromOpmlHead (&quot;urlHomePageTemplate&quot;, undefined);" created="Tue, 10 Aug 2021 14:53:40 GMT"/>
					<outline text="var urlGlossary = getValueFromOpmlHead (&quot;urlGlossary&quot;, undefined);" created="Tue, 10 Aug 2021 14:53:40 GMT"/>
					<outline text="var urlAboutOpml = getValueFromOpmlHead (&quot;urlAboutOpml&quot;, undefined); //10/18/21 by DW" created="Tue, 10 Aug 2021 14:53:40 GMT"/>
					<outline text="var timeZoneOffset = getValueFromOpmlHead (&quot;timeZoneOffset&quot;, undefined); //10/13/21 by DW" created="Tue, 10 Aug 2021 14:53:40 GMT"/>
					<outline text="" created="Wed, 13 Oct 2021 14:50:49 GMT"/>
					<outline text="baseUrl = getValueFromOpmlHead (&quot;urlBlogWebsite&quot;, baseUrl); //10/13/21 by DW" created="Wed, 13 Oct 2021 14:50:50 GMT"/>
					<outline text="if (!utils.endsWith (baseUrl, &quot;/&quot;)) { //10/14/21 by DW">
						<outline text="baseUrl += &quot;/&quot;;" created="Thu, 14 Oct 2021 11:40:09 GMT"/>
						<outline text="}"/>
						</outline>
					<outline text="" created="Wed, 13 Oct 2021 14:50:50 GMT"/>
					<outline text="var flOldSchoolUseCache = getValueFromOpmlHead (&quot;flOldSchoolUseCache&quot;, false);" created="Tue, 10 Aug 2021 14:53:40 GMT"/>
					<outline text="if (theConfig === undefined) {" created="Tue, 10 Aug 2021 13:42:38 GMT">
						<outline text="var basePath = &quot;/oldschool.scripting.com/&quot; + blogName + &quot;/&quot;;" isComment="true" created="Tue, 10 Aug 2021 14:51:58 GMT"/>
						<outline text="const urlOpml = &quot;http://drummer.scripting.com/&quot; + blogName + &quot;/blog.opml&quot;;" isComment="true" created="Mon, 09 Aug 2021 16:19:07 GMT"/>
						<outline text="const appDomain = &quot;oldschool.scripting.com&quot;;" isComment="true" created="Tue, 10 Aug 2021 14:59:15 GMT"/>
						<outline text="oldschoolConfig.blogs [blogName] = {" created="Tue, 10 Aug 2021 13:43:10 GMT">
							<outline text="basePath,   "/>
							<outline text="basePathItems: basePath + &quot;items/&quot;,"/>
							<outline text="baseUrl, //10/12/21 by DW"/>
							<outline text="baseUrl: &quot;http:/&quot; + basePath," isComment="true"/>
							<outline text="title,"/>
							<outline text="link: baseUrl, //10/12/21 by DW"/>
							<outline text="description,"/>
							<outline text="urlTemplate,"/>
							<outline text="urlHomePageTemplate,"/>
							<outline text="urlOpml,"/>
							<outline text="urlHeaderImage," created="Wed, 11 Aug 2021 16:48:52 GMT"/>
							<outline text="copyright,"/>
							<outline text="language: &quot;en-us&quot;,"/>
							<outline text="generator: myProductName + &quot; v&quot; + myVersion,"/>
							<outline text="docs: &quot;http://cyber.law.harvard.edu/rss/rss.html&quot;,"/>
							<outline text="docsForJsonFeed: &quot;https://github.com/scripting/Scripting-News/blob/master/rss-in-json/README.md&quot;,"/>
							<outline text="twitterScreenName: blogName,"/>
							<outline text="facebookPageName: undefined,"/>
							<outline text="maxFeedItems: 50,"/>
							<outline text="appDomain: config.appDomain,"/>
							<outline text="flRssCloudEnabled: true,"/>
							<outline text="rssCloudDomain: &quot;rpc.rsscloud.io&quot;,"/>
							<outline text="rssCloudPort: 5337,"/>
							<outline text="rssCloudPath: &quot;/pleaseNotify&quot;,"/>
							<outline text="rssPingPath: &quot;/ping&quot;,"/>
							<outline text="rssCloudRegisterProcedure: &quot;&quot;,"/>
							<outline text="rssCloudProtocol: &quot;http-post&quot;,"/>
							<outline text="maxDaysOnHomePage: 25,"/>
							<outline text="flUploadItemsToS3: true,"/>
							<outline text="flIncludeImageInMetadata: true,"/>
							<outline text="urlGlossaryOpml: urlGlossary,"/>
							<outline text="urlAboutOpml, //10/18/21 by DW" created="Mon, 18 Oct 2021 14:44:40 GMT"/>
							<outline text="flGoogleAnalytics: false,"/>
							<outline text="flAlwaysBuildHomePage: true, //8/23/21 by DW" created="Mon, 23 Aug 2021 16:10:48 GMT"/>
							<outline text="flOldSchoolUseCache, //8/30/21 by DW" created="Mon, 30 Aug 2021 17:15:30 GMT"/>
							<outline text="timeZoneOffset, //10/13/21 by DW" created="Wed, 13 Oct 2021 20:40:32 GMT"/>
							<outline text="wordpress: wordpressConfig //8/9/23 by DW" created="Wed, 09 Aug 2023 19:51:08 GMT"/>
							<outline text="};" created="Tue, 10 Aug 2021 13:43:13 GMT"/>
							</outline>
						<outline text="theConfig = oldschoolConfig.blogs [blogName];"/>
						<outline text="copyAllHeadElements ();" created="Wed, 11 Aug 2021 19:23:13 GMT"/>
						<outline text="oldschool.initBlog (blogName, function () {">
							<outline text="callback (theConfig);" created="Tue, 10 Aug 2021 15:27:39 GMT"/>
							<outline text="});" created="Tue, 10 Aug 2021 15:27:30 GMT"/>
							</outline>
						<outline text="}" created="Tue, 10 Aug 2021 13:43:01 GMT"/>
						</outline>
					<outline text="else {" created="Tue, 10 Aug 2021 15:27:50 GMT">
						<outline text="theConfig.title = title;" created="Tue, 10 Aug 2021 19:58:55 GMT"/>
						<outline text="theConfig.description = description;" created="Tue, 10 Aug 2021 19:58:55 GMT"/>
						<outline text="theConfig.urlTemplate = urlTemplate;" created="Tue, 10 Aug 2021 19:58:55 GMT"/>
						<outline text="theConfig.urlHomePageTemplate = urlHomePageTemplate;" created="Tue, 10 Aug 2021 19:58:55 GMT"/>
						<outline text="theConfig.urlHeaderImage = urlHeaderImage;" created="Tue, 10 Aug 2021 19:58:55 GMT"/>
						<outline text="theConfig.copyright = copyright;" created="Tue, 10 Aug 2021 19:58:55 GMT"/>
						<outline text="theConfig.urlGlossaryOpml = urlGlossary;" created="Tue, 10 Aug 2021 19:58:55 GMT"/>
						<outline text="theConfig.urlAboutOpml = urlAboutOpml; //10/18/21 by DW" created="Tue, 10 Aug 2021 19:58:55 GMT"/>
						<outline text="theConfig.baseUrl = baseUrl; //10/20/21 by DW" created="Tue, 10 Aug 2021 19:58:55 GMT"/>
						<outline text="theConfig.timeZoneOffset = timeZoneOffset; //10/20/21 by DW" created="Tue, 10 Aug 2021 19:58:55 GMT"/>
						<outline text="theConfig.wordpress = wordpressConfig; //8/9/23 by DW" created="Wed, 09 Aug 2023 19:51:08 GMT"/>
						<outline text="copyAllHeadElements ();" created="Wed, 11 Aug 2021 19:23:13 GMT"/>
						<outline text="callback (theConfig);" created="Tue, 10 Aug 2021 15:27:39 GMT"/>
						<outline text="}" created="Tue, 10 Aug 2021 15:27:52 GMT"/>
						</outline>
					<outline text="}" created="Tue, 10 Aug 2021 14:50:14 GMT"/>
					</outline>
				<outline text="function getBlogOutline (urlBlogOpml, callback) {" created="Mon, 09 Aug 2021 16:18:33 GMT">
					<outline text="httpRequest (urlBlogOpml, undefined, undefined, function (err, opmltext) {" created="Thu, 17 Jun 2021 19:56:51 GMT">
						<outline text="if (err) {" created="Sun, 08 Aug 2021 15:12:18 GMT">
							<outline text="callback (err);" created="Sun, 08 Aug 2021 15:14:05 GMT"/>
							<outline text="}" created="Sun, 08 Aug 2021 15:14:10 GMT"/>
							</outline>
						<outline text="else {" created="Sun, 08 Aug 2021 15:12:29 GMT">
							<outline text="opml.parse (opmltext, function (err, theOutline) {">
								<outline text="if (err) {">
									<outline text="callback (err);"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="callback (undefined, theOutline);" created="Mon, 09 Aug 2021 16:19:53 GMT"/>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}" created="Sun, 08 Aug 2021 15:12:31 GMT"/>
							</outline>
						<outline text="})" created="Thu, 17 Jun 2021 19:58:33 GMT"/>
						</outline>
					<outline text="}" created="Mon, 09 Aug 2021 16:18:47 GMT"/>
					</outline>
				<outline text="function oldschoolBuild (blogName, params, callback) {" created="Mon, 09 Aug 2021 16:07:59 GMT">
					<outline text="Changes" isComment="true" created="Sat, 04 Sep 2021 13:29:49 GMT">
						<outline text="8/9/23; 3:24:36 PM by DW" created="Wed, 09 Aug 2023 19:24:35 GMT">
							<outline text="New param -- the params from the HTTP call. Allows us to transmit config info for wordpress, possibly other things in the future." created="Wed, 09 Aug 2023 19:24:36 GMT"/>
							</outline>
						<outline text="9/4/21; 9:29:54 AM by DW" created="Sat, 04 Sep 2021 13:29:53 GMT">
							<outline text="If blogName is in the config.specialOutlines struct, we use the URL there instead of computing one on drummer.scripting.com." created="Sat, 04 Sep 2021 13:29:54 GMT"/>
							</outline>
						</outline>
					<outline text="var urlBlogOpml, basePath, baseUrl, whenstart = new Date ();" created="Mon, 09 Aug 2021 16:19:07 GMT"/>
					<outline text="if (config.specialOutlines [blogName] !== undefined) {" created="Sat, 04 Sep 2021 13:29:50 GMT">
						<outline text="urlBlogOpml = config.specialOutlines [blogName].urlBlogOpml;" created="Sat, 04 Sep 2021 13:36:27 GMT"/>
						<outline text="basePath = config.specialOutlines [blogName].basePath;" created="Sat, 04 Sep 2021 13:36:27 GMT"/>
						<outline text="baseUrl = config.specialOutlines [blogName].baseUrl;" created="Sat, 04 Sep 2021 13:36:27 GMT"/>
						<outline text="}" created="Sat, 04 Sep 2021 13:35:51 GMT"/>
						</outline>
					<outline text="else {" created="Sat, 04 Sep 2021 13:35:52 GMT">
						<outline text="urlBlogOpml = config.drummerHome + blogName + &quot;/blog.opml&quot;; //2/21/23 by DW" created="Wed, 22 Feb 2023 03:01:47 GMT"/>
						<outline text="urlBlogOpml = &quot;http://drummer.scripting.com/&quot; + blogName + &quot;/blog.opml&quot;;" isComment="true" created="Sat, 04 Sep 2021 13:36:50 GMT"/>
						<outline text="basePath = config.s3BasePath + blogName + &quot;/&quot;; //10/12/21 by DW" created="Tue, 12 Oct 2021 20:27:33 GMT"/>
						<outline text="baseUrl = config.s3BaseUrl + blogName + &quot;/&quot;; //10/12/21 by DW" created="Tue, 12 Oct 2021 20:27:33 GMT"/>
						<outline text="basePath = &quot;/oldschool.scripting.com/&quot; + blogName + &quot;/&quot;;" isComment="true" created="Sat, 04 Sep 2021 13:36:27 GMT"/>
						<outline text="}" created="Sat, 04 Sep 2021 13:35:54 GMT"/>
						</outline>
					<outline text="" created="Sat, 04 Sep 2021 13:29:50 GMT"/>
					<outline text="var wordpressConfig = undefined; //8/9/23 by DW" created="Wed, 09 Aug 2023 19:26:52 GMT"/>
					<outline text="if (params.wordpress !== undefined) { //8/9/23 by DW" created="Wed, 09 Aug 2023 19:25:29 GMT">
						<outline text="wordpressConfig = {" created="Wed, 09 Aug 2023 19:26:05 GMT">
							<outline text="enabled: true," created="Wed, 09 Aug 2023 19:26:19 GMT"/>
							<outline text="siteurl: params.siteurl," created="Wed, 09 Aug 2023 19:26:22 GMT"/>
							<outline text="username: params.username, " created="Wed, 09 Aug 2023 19:26:25 GMT"/>
							<outline text="password: params.password" created="Wed, 09 Aug 2023 19:26:28 GMT"/>
							<outline text="};" created="Wed, 09 Aug 2023 19:26:14 GMT"/>
							</outline>
						<outline text="}" created="Wed, 09 Aug 2023 19:25:50 GMT"/>
						</outline>
					<outline text="" created="Wed, 09 Aug 2023 19:25:30 GMT"/>
					<outline text="getBlogOutline (urlBlogOpml, function (err, theOutline) {" created="Mon, 09 Aug 2021 16:20:16 GMT">
						<outline text="if (err) {" created="Tue, 10 Aug 2021 16:43:40 GMT">
							<outline text="const message = &quot;Can't build the blog for \&quot;&quot; + blogName + &quot;\&quot; because blog.opml doesn't exist in Drummer, or is private.&quot;;" created="Tue, 10 Aug 2021 16:45:22 GMT"/>
							<outline text="callback ({message});" created="Tue, 10 Aug 2021 16:46:32 GMT"/>
							<outline text="}" created="Tue, 10 Aug 2021 16:43:44 GMT"/>
							</outline>
						<outline text="else {" created="Tue, 10 Aug 2021 16:43:45 GMT">
							<outline text="initBlogConfig (blogName, urlBlogOpml, basePath, baseUrl, theOutline, wordpressConfig, function (theConfig) {" created="Tue, 10 Aug 2021 15:01:17 GMT">
								<outline text="console.log (&quot;oldschoolBuild: blogName == &quot; + blogName);" created="Wed, 11 Aug 2021 21:54:27 GMT"/>
								<outline text="console.log (&quot;oldschoolBuild: theOutline.opml.head == &quot; + utils.jsonStringify (theOutline.opml.head));" isComment="true" created="Wed, 11 Aug 2021 21:54:27 GMT"/>
								<outline text="console.log (&quot;oldschoolBuild: theConfig == &quot; + utils.jsonStringify (theConfig));" created="Wed, 11 Aug 2021 21:54:27 GMT"/>
								<outline text="var options = {" created="Mon, 09 Aug 2021 16:26:20 GMT">
									<outline text="blogName" created="Mon, 09 Aug 2021 16:27:05 GMT"/>
									<outline text="};" created="Mon, 09 Aug 2021 16:26:25 GMT"/>
									</outline>
								<outline text="oldschool.publishBlog (theOutline.opml, options, function (blogConfig, eventLog) {">
									<outline text="const data = {">
										<outline text="baseUrl: blogConfig.baseUrl,"/>
										<outline text="ctSecs: utils.secondsSince (whenstart)," created="Tue, 10 Aug 2021 16:13:11 GMT"/>
										<outline text="oldSchoolVersion: oldschool.getVersionInfo ().myVersion," created="Thu, 28 Oct 2021 15:25:48 GMT"/>
										<outline text="eventLog, //11/2/21 by DW" created="Tue, 02 Nov 2021 15:55:17 GMT"/>
										<outline text="headLevelAtts: theOutline.opml.head" created="Wed, 27 Oct 2021 15:50:05 GMT"/>
										<outline text="};"/>
										</outline>
									<outline text="callback (undefined, data);" created="Mon, 09 Aug 2021 16:11:31 GMT"/>
									<outline text="});"/>
									</outline>
								<outline text="});" created="Tue, 10 Aug 2021 15:27:00 GMT"/>
								</outline>
							<outline text="}" created="Tue, 10 Aug 2021 16:43:48 GMT"/>
							</outline>
						<outline text="});" created="Mon, 09 Aug 2021 16:20:29 GMT"/>
						</outline>
					<outline text="}" created="Mon, 09 Aug 2021 16:08:09 GMT"/>
					</outline>
				<outline text="function handleHttpRequest (theRequest) { " created="Mon, 09 Aug 2021 16:06:23 GMT">
					<outline text="const params = theRequest.params;"/>
					<outline text="function returnNotFound () {">
						<outline text="theRequest.httpReturn (404, &quot;text/plain&quot;, &quot;Not found.&quot;);"/>
						<outline text="}"/>
						</outline>
					<outline text="function returnPlainText (s) {">
						<outline text="theRequest.httpReturn (200, &quot;text/plain&quot;, s.toString ());"/>
						<outline text="}"/>
						</outline>
					<outline text="function returnData (jstruct) {">
						<outline text="if (jstruct === undefined) {">
							<outline text="jstruct = {};"/>
							<outline text="}"/>
							</outline>
						<outline text="theRequest.httpReturn (200, &quot;application/json&quot;, utils.jsonStringify (jstruct));"/>
						<outline text="}"/>
						</outline>
					<outline text="function returnError (jstruct) {">
						<outline text="theRequest.httpReturn (500, &quot;application/json&quot;, utils.jsonStringify (jstruct));"/>
						<outline text="}"/>
						</outline>
					<outline text="function httpReturn (err, jstruct) {">
						<outline text="if (err) {">
							<outline text="returnError (err);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="returnData (jstruct);"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="switch (theRequest.lowermethod) {">
						<outline text="case &quot;get&quot;:">
							<outline text="switch (theRequest.lowerpath) {">
								<outline text="case &quot;/&quot;:" isComment="true">
									<outline text="returnServerHomePage ();"/>
									<outline text="return (true);"/>
									</outline>
								<outline text="case &quot;/now&quot;:">
									<outline text="returnPlainText (new Date ());"/>
									<outline text="return (true);"/>
									</outline>
								<outline text="case &quot;/version&quot;:">
									<outline text="returnData ({">
										<outline text="productName: myProductName,"/>
										<outline text="version: myVersion"/>
										<outline text="});"/>
										</outline>
									<outline text="return (true);"/>
									</outline>
								<outline text="case &quot;/build&quot;:">
									<outline text="oldschoolBuild (params.blog, params, httpReturn);" created="Mon, 09 Aug 2021 16:04:41 GMT"/>
									<outline text="return;"/>
									</outline>
								<outline text="case &quot;/stats&quot;:" isComment="true">
									<outline text="returnData (stats);"/>
									<outline text="return (true);"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="break;"/>
							</outline>
						<outline text="case &quot;post&quot;:" isComment="true">
							<outline text="switch (theRequest.lowerpath) {">
								<outline text="}"/>
								</outline>
							<outline text="break;"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="return (false);"/>
					<outline text="}" created="Mon, 09 Aug 2021 16:06:25 GMT"/>
					</outline>
				<outline text="function readConfig (fname, config, callback) { ">
					<outline text="utils.sureFilePath (fname, function () {">
						<outline text="fs.readFile (fname, function (err, data) {">
							<outline text="if (!err) {">
								<outline text="try {">
									<outline text="var jstruct = JSON.parse (data.toString ());"/>
									<outline text="for (var x in jstruct) {">
										<outline text="config [x] = jstruct [x];"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="catch (err) {">
									<outline text="console.log (&quot;readConfig: err == &quot; + err.message);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="if (callback !== undefined) {">
								<outline text="callback ();"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="" created="Mon, 09 Aug 2021 15:57:15 GMT"/>
				<outline text="oldschool.init (oldSchoolConfig, function () {">
					<outline text="readConfig (fnameConfig, config, function () {">
						<outline text="davehttp.start (config, handleHttpRequest);"/>
						<outline text="});"/>
						</outline>
					<outline text="});"/>
					</outline>
				</outline>
			<outline text="" created="Thu, 02 Sep 2021 19:42:22 GMT"/>
			<outline text="templates/minimal/code.js">
				<outline text="var myVersion = &quot;0.7.0&quot;;"/>
				<outline text=""/>
				<outline text="const rightCaret = &quot;fa fa-caret-right darkCaretColor&quot;, downCaret = &quot;fa fa-caret-down lightCaretColor&quot;;"/>
				<outline text="var urlTwitterServer = &quot;http://electricserver.scripting.com/&quot;;"/>
				<outline text="var urlTwitterServer = &quot;http://twitter2.radio3.io:5342/&quot;;" isComment="true"/>
				<outline text=""/>
				<outline text="///tabs -- 9/2/21 by DW" created="Thu, 02 Sep 2021 15:05:37 GMT">
					<outline text="var tabs = [">
						<outline text="{">
							<outline text="enabled: function () {">
								<outline text="return (true);" created="Thu, 02 Sep 2021 12:56:09 GMT"/>
								<outline text="}," created="Thu, 02 Sep 2021 12:56:03 GMT"/>
								</outline>
							<outline text="active: true," created="Wed, 01 Sep 2021 17:40:50 GMT"/>
							<outline text="id: &quot;blog&quot;," created="Wed, 01 Sep 2021 17:25:12 GMT"/>
							<outline text="title: &quot;Blog&quot;,"/>
							<outline text="icon: &quot;book&quot;,"/>
							<outline text="viewer: viewBlogTab"/>
							<outline text="},"/>
							</outline>
						<outline text="{">
							<outline text="enabled: function () {">
								<outline text="return ((opmlHead.urlLinkblogJson !== undefined) || (opmlHead.urlLinkblogXml !== undefined));" created="Thu, 02 Sep 2021 12:56:09 GMT"/>
								<outline text="}," created="Thu, 02 Sep 2021 12:56:03 GMT"/>
								</outline>
							<outline text="active: false," created="Wed, 01 Sep 2021 17:40:50 GMT"/>
							<outline text="id: &quot;links&quot;," created="Wed, 01 Sep 2021 17:25:12 GMT"/>
							<outline text="title: &quot;Links&quot;,"/>
							<outline text="icon: &quot;link&quot;,"/>
							<outline text="viewer: viewLinkblogTab"/>
							<outline text="},"/>
							</outline>
						<outline text="{">
							<outline text="enabled: function () {">
								<outline text="return (opmlHead.urlAboutOpml !== undefined);" created="Thu, 02 Sep 2021 12:56:09 GMT"/>
								<outline text="}," created="Thu, 02 Sep 2021 12:56:03 GMT"/>
								</outline>
							<outline text="active: false," created="Wed, 01 Sep 2021 17:40:50 GMT"/>
							<outline text="id: &quot;about&quot;," created="Wed, 01 Sep 2021 17:25:12 GMT"/>
							<outline text="title: &quot;About&quot;,"/>
							<outline text="icon: &quot;info-circle&quot;,"/>
							<outline text="viewer: viewAboutTab"/>
							<outline text="}"/>
							</outline>
						<outline text="];"/>
						</outline>
					<outline text=""/>
					<outline text="function setTabContent (htmltext) {">
						<outline text="$(&quot;#idTabContent&quot;).html (htmltext);"/>
						<outline text="}"/>
						</outline>
					<outline text="function readGlossary (urlGlossary, callback) { //9/10/21 by DW">
						<outline text="var theGlossary = new Object (), whenstart = new Date ();"/>
						<outline text="if (urlGlossary === undefined) {" created="Fri, 10 Sep 2021 13:45:08 GMT">
							<outline text="callback (theGlossary);" created="Fri, 10 Sep 2021 13:45:26 GMT"/>
							<outline text="}" created="Fri, 10 Sep 2021 13:45:17 GMT"/>
							</outline>
						<outline text="else {" created="Fri, 10 Sep 2021 13:45:18 GMT">
							<outline text="readHttpFileThruProxy (urlGlossary, undefined, function (opmltext) {">
								<outline text="if (opmltext !== undefined) {">
									<outline text="var theOutline = opml.parse (opmltext);" created="Fri, 02 Jul 2021 20:57:53 GMT"/>
									<outline text="theOutline.opml.body.subs.forEach (function (item) {" created="Fri, 10 Sep 2021 13:51:37 GMT">
										<outline text="theGlossary [item.text] = item.subs [0].text;" created="Fri, 10 Sep 2021 13:52:08 GMT"/>
										<outline text="});" created="Fri, 10 Sep 2021 13:51:59 GMT"/>
										</outline>
									<outline text="console.log (&quot;readGlossary: &quot; + secondsSince (whenstart) + &quot; secs.&quot;);"/>
									<outline text="}"/>
									</outline>
								<outline text="callback (theGlossary);"/>
								<outline text="});"/>
								</outline>
							<outline text="}" created="Fri, 10 Sep 2021 13:45:19 GMT"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function viewBlogTab (callback) { //nothing to do, the content is already there" created="Wed, 01 Sep 2021 20:21:17 GMT">
						<outline text="callback (true);" created="Wed, 01 Sep 2021 21:01:16 GMT"/>
						<outline text="}" created="Wed, 01 Sep 2021 20:21:33 GMT"/>
						</outline>
					<outline text="function viewLinkblogTab (callback) {" created="Wed, 01 Sep 2021 20:21:34 GMT">
						<outline text="setTabContent (&quot;&quot;); //wipe out the blog html before user sees it" created="Wed, 01 Sep 2021 20:21:52 GMT"/>
						<outline text="if (opmlHead.urlLinkblogXml === undefined) {" created="Thu, 20 Apr 2023 14:38:03 GMT">
							<outline text="if (opmlHead.urlLinkblogJson === undefined) {" created="Wed, 01 Sep 2021 20:56:59 GMT">
								<outline text="callback (false);" created="Wed, 01 Sep 2021 20:57:34 GMT"/>
								<outline text="}" created="Wed, 01 Sep 2021 20:57:32 GMT"/>
								</outline>
							<outline text="else {" created="Sat, 02 Oct 2021 14:32:52 GMT">
								<outline text="var urlHtmltext = stringPopExtension (opmlHead.urlLinkblogJson) + &quot;.html&quot;;" created="Sat, 02 Oct 2021 14:33:02 GMT"/>
								<outline text="readHttpFile (urlHtmltext, function (htmltext) {">
									<outline text="if (htmltext === undefined) {" created="Wed, 01 Sep 2021 20:58:20 GMT">
										<outline text="callback (false);" created="Wed, 01 Sep 2021 20:57:34 GMT"/>
										<outline text="}" created="Wed, 01 Sep 2021 20:58:36 GMT"/>
										</outline>
									<outline text="else {" created="Wed, 01 Sep 2021 20:59:12 GMT">
										<outline text="setTabContent (htmltext);" created="Wed, 01 Sep 2021 20:21:52 GMT"/>
										<outline text="callback (true);" created="Wed, 01 Sep 2021 20:57:34 GMT"/>
										<outline text="}" created="Wed, 01 Sep 2021 20:59:15 GMT"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="}" created="Sat, 02 Oct 2021 14:32:58 GMT"/>
								</outline>
							<outline text="}" created="Thu, 20 Apr 2023 14:38:31 GMT"/>
							</outline>
						<outline text="else { //4/20/23 by DW" created="Thu, 20 Apr 2023 14:38:32 GMT">
							<outline text="const apiUrl = &quot;http://feeder.scripting.com/returnlinkbloghtml?url=&quot; + encodeURIComponent (opmlHead.urlLinkblogXml);" created="Fri, 19 Nov 2021 18:13:04 GMT"/>
							<outline text="console.log (&quot;viewLinkblogTab: apiUrl == &quot; + apiUrl);" created="Thu, 20 Apr 2023 16:01:30 GMT"/>
							<outline text="readHttpFile (apiUrl, function (htmltext) {">
								<outline text="if (htmltext === undefined) {">
									<outline text="callback (false);" created="Wed, 01 Sep 2021 20:57:34 GMT"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="setTabContent (htmltext);" created="Wed, 01 Sep 2021 20:21:52 GMT"/>
									<outline text="callback (true);" created="Wed, 01 Sep 2021 20:57:34 GMT"/>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}" created="Thu, 20 Apr 2023 14:38:34 GMT"/>
							</outline>
						<outline text="}" created="Wed, 01 Sep 2021 20:21:45 GMT"/>
						</outline>
					<outline text="function viewLinkblogTab (callback) {" isComment="true" created="Wed, 01 Sep 2021 20:21:34 GMT">
						<outline text="setTabContent (&quot;&quot;); //wipe out the blog html before user sees it" created="Wed, 01 Sep 2021 20:21:52 GMT"/>
						<outline text="if (opmlHead.urlLinkblogJson === undefined) {" created="Wed, 01 Sep 2021 20:56:59 GMT">
							<outline text="callback (false);" created="Wed, 01 Sep 2021 20:57:34 GMT"/>
							<outline text="}" created="Wed, 01 Sep 2021 20:57:32 GMT"/>
							</outline>
						<outline text="function appendDay (jstruct) {">
							<outline text="Changes " isComment="true">
								<outline text="9/11/17; 9:36:39 AM by DW">
									<outline text="Use divDayTitle to format the day title, so it agrees with the blog format."/>
									</outline>
								<outline text="5/28/17; 9:25:59 AM by DW">
									<outline text="Remove dependency on pagetable.homePageDateFormat."/>
									</outline>
								<outline text="10/15/14; 1:47:22 PM by DW">
									<outline text="urlSplitter doesn't do nice things with links that begin with a blank. It also shouldn't be possible for one badly formed item to kill the whole day. "/>
									</outline>
								</outline>
							<outline text="var daytext = &quot;&quot;, indentlevel = 0;"/>
							<outline text="var dateFormat = &quot;%A, %B %e, %Y&quot;;"/>
							<outline text="try {dateFormat = pagetable.homePageDateFormat} catch (err) {};"/>
							<outline text="var datestring = formatDate (jstruct.when, dateFormat);"/>
							<outline text="var datestring = formatDate (jstruct.when, pagetable.homePageDateFormat);" isComment="true"/>
							<outline text="function add (s) {" created="Wed, 19 Jun 2013 18:21:56 GMT" pgfnum="26656">
								<outline text="daytext += filledString (&quot;\t&quot;, indentlevel) + s + &quot;\n&quot;;" created="Wed, 19 Jun 2013 18:22:33 GMT" pgfnum="26661"/>
								<outline text="}" created="Wed, 19 Jun 2013 18:22:01 GMT" pgfnum="26658"/>
								</outline>
							<outline text="console.log (&quot;appendDay: &quot; + datestring);" isComment="true"/>
							<outline text="add (&quot;&lt;div class=\&quot;divDayTitle\&quot;&gt;&quot; + datestring + &quot;&lt;/div&gt;&quot;);"/>
							<outline text="add (&quot;&lt;div class=\&quot;divLinkblogDayTitle\&quot;&gt;&quot; + datestring + &quot;&lt;/div&gt;&quot;);" isComment="true"/>
							<outline text="add (&quot;&lt;div class=\&quot;divLinkblogDay\&quot;&gt;&quot;); indentlevel++;"/>
							<outline text="for (var i = 0; i &lt; jstruct.dayHistory.length; i++) {">
								<outline text="try {">
									<outline text="var item = jstruct.dayHistory [i], linktext = &quot;&quot;, icon = &quot;&quot;;"/>
									<outline text="//set linktext, icon">
										<outline text="if ((item.link != undefined) &amp;&amp; (item.link.length &gt; 0)) {">
											<outline text="var splitUrl = urlSplitter (trimLeading (item.link, &quot; &quot;)); //10/15/14 by DW -- remove leading blanks"/>
											<outline text="var host = splitUrl.host;"/>
											<outline text="if (beginsWith (host, &quot;www.&quot;)) {">
												<outline text="host = stringDelete (host, 1, 4);"/>
												<outline text="}"/>
												</outline>
											<outline text="linktext = &quot; &lt;a class=\&quot;aHost\&quot; href=\&quot;&quot; + item.link + &quot;\&quot; target=\&quot;blank\&quot;&gt;&quot; + host + &quot;&lt;/a&gt;&quot;;"/>
											<outline text=""/>
											<outline text="icon = &quot;&lt;a href=\&quot;&quot; + item.link + &quot;\&quot; target=\&quot;_blank\&quot;&gt;&lt;img class=\&quot;imgFavicon\&quot; src=\&quot;&quot; + getFavicon (item.link) + &quot;\&quot;&gt;&lt;/a&gt;&quot;; //9/26/14 by DW" isComment="true"/>
											<outline text=""/>
											<outline text="}"/>
											</outline>
										</outline>
									<outline text="add (&quot;&lt;p&gt;&quot; + icon + item.text + linktext + &quot;&lt;/p&gt;&quot;);"/>
									<outline text="}"/>
									</outline>
								<outline text="catch (error) {">
									<outline text="console.log (&quot;appendDay: error == &quot; + error + &quot; while adding item == &quot; + item.text);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="add (&quot;&lt;/div&gt;&quot;); indentlevel--;"/>
							<outline text="return (daytext)"/>
							<outline text="}"/>
							</outline>
						<outline text="readHttpFile (opmlHead.urlLinkblogJson, function (jsontext) {">
							<outline text="if (jsontext === undefined) {" created="Wed, 01 Sep 2021 20:58:20 GMT">
								<outline text="callback (false);" created="Wed, 01 Sep 2021 20:57:34 GMT"/>
								<outline text="}" created="Wed, 01 Sep 2021 20:58:36 GMT"/>
								</outline>
							<outline text="else {" created="Wed, 01 Sep 2021 20:59:12 GMT">
								<outline text="var htmltext = &quot;&quot;, daysTable = JSON.parse (jsontext);"/>
								<outline text="htmltext += &quot;&lt;div class=\&quot;divLinkblogDays\&quot; id=\&quot;idLinkblogDays\&quot; data-title=\&quot;Linkblog\&quot;&gt;&quot;;" created="Thu, 02 Sep 2021 14:28:15 GMT"/>
								<outline text="for (var i = 0; i &lt; daysTable.length; i++) { //10/8/16 by DW">
									<outline text="htmltext += appendDay (daysTable [i].jstruct);"/>
									<outline text="}"/>
									</outline>
								<outline text="htmltext += &quot;&lt;/div&gt;&quot;;"/>
								<outline text="setTabContent (htmltext);" created="Wed, 01 Sep 2021 20:21:52 GMT"/>
								<outline text="callback (true);" created="Wed, 01 Sep 2021 20:57:34 GMT"/>
								<outline text="}" created="Wed, 01 Sep 2021 20:59:15 GMT"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}" created="Wed, 01 Sep 2021 20:21:45 GMT"/>
						</outline>
					<outline text="function viewAboutTab (callback) {" created="Wed, 01 Sep 2021 20:21:34 GMT">
						<outline text="Changes" isComment="true" created="Mon, 18 Oct 2021 15:53:06 GMT">
							<outline text="10/18/21; 11:53:10 AM by DW" created="Mon, 18 Oct 2021 15:53:09 GMT">
								<outline text="If a global aboutOutline is defined, use that instead of reading the outline over HTTP." created="Mon, 18 Oct 2021 15:53:11 GMT"/>
								</outline>
							</outline>
						<outline text="" created="Mon, 18 Oct 2021 15:53:06 GMT"/>
						<outline text="function processOutlineStruct (theOutline) {" created="Mon, 18 Oct 2021 15:53:52 GMT">
							<outline text="var outlineBody = theOutline.opml.body;" created="Thu, 02 Sep 2021 14:05:54 GMT"/>
							<outline text="outlineBody.text = opmlHead.title;" isComment="true" created="Thu, 02 Sep 2021 14:06:08 GMT"/>
							<outline text="var htmltext = renderOutlineBrowser (outlineBody, false, undefined, undefined, true);"/>
							<outline text="" created="Thu, 02 Sep 2021 14:05:54 GMT"/>
							<outline text="readGlossary (opmlHead.urlGlossary, function (theGlossary) {" created="Fri, 10 Sep 2021 13:43:42 GMT">
								<outline text="htmltext = multipleReplaceAll (htmltext, theGlossary);"/>
								<outline text="htmltext = safeEmojiProcess (htmltext);"/>
								<outline text="setTabContent (htmltext);" created="Wed, 01 Sep 2021 20:21:52 GMT"/>
								<outline text="callback (true);" created="Thu, 02 Sep 2021 13:41:28 GMT"/>
								<outline text="});" created="Fri, 10 Sep 2021 13:44:04 GMT"/>
								</outline>
							<outline text="}" created="Mon, 18 Oct 2021 15:54:05 GMT"/>
							</outline>
						<outline text="" created="Mon, 18 Oct 2021 15:53:52 GMT"/>
						<outline text="function safeEmojiProcess (s) {" created="Sat, 11 Sep 2021 13:19:33 GMT">
							<outline text="Changes" isComment="true" created="Sat, 11 Sep 2021 13:19:45 GMT">
								<outline text="9/11/21; 9:21:17 AM by DW" created="Sat, 11 Sep 2021 13:21:16 GMT">
									<outline text="I made a change to the template to include this routine, but if people haven't rebuilt their blogs they won't have the includes and this call will fail. " created="Sat, 11 Sep 2021 13:21:17 GMT"/>
									<outline text="So we embed it within a try, to be safe. " created="Sat, 11 Sep 2021 13:22:03 GMT"/>
									</outline>
								</outline>
							<outline text="try {" created="Sat, 11 Sep 2021 13:19:47 GMT">
								<outline text="return (emojiProcess (s));" created="Sat, 11 Sep 2021 13:20:06 GMT"/>
								<outline text="}" created="Sat, 11 Sep 2021 13:19:51 GMT"/>
								</outline>
							<outline text="catch (err) {" created="Sat, 11 Sep 2021 13:19:52 GMT">
								<outline text="return (s);" created="Sat, 11 Sep 2021 13:20:18 GMT"/>
								<outline text="}" created="Sat, 11 Sep 2021 13:19:54 GMT"/>
								</outline>
							<outline text="}" created="Sat, 11 Sep 2021 13:19:44 GMT"/>
							</outline>
						<outline text="setTabContent (&quot;&quot;); //wipe out the blog html before user sees it" created="Wed, 01 Sep 2021 20:21:52 GMT"/>
						<outline text="" created="Mon, 18 Oct 2021 15:55:54 GMT"/>
						<outline text="var flBuilt = false;" created="Mon, 18 Oct 2021 16:34:26 GMT"/>
						<outline text="try {" created="Mon, 18 Oct 2021 16:34:27 GMT">
							<outline text="if (aboutOutline !== undefined) { //10/18/21 by DW" created="Mon, 18 Oct 2021 15:55:54 GMT">
								<outline text="console.log (&quot;viewAboutTab: using the pre-built aboutOutline.&quot;);" created="Mon, 18 Oct 2021 15:59:38 GMT"/>
								<outline text="processOutlineStruct (aboutOutline)" created="Mon, 18 Oct 2021 15:56:35 GMT"/>
								<outline text="flBuilt = true;" created="Mon, 18 Oct 2021 16:35:05 GMT"/>
								<outline text="}" created="Mon, 18 Oct 2021 15:55:59 GMT"/>
								</outline>
							<outline text="}" created="Mon, 18 Oct 2021 16:34:31 GMT"/>
							</outline>
						<outline text="catch (err) {" created="Mon, 18 Oct 2021 16:34:31 GMT">
							<outline text="}" created="Mon, 18 Oct 2021 16:34:35 GMT"/>
							</outline>
						<outline text="if (!flBuilt) {" created="Mon, 18 Oct 2021 16:34:27 GMT">
							<outline text="readHttpFileThruProxy (opmlHead.urlAboutOpml, undefined, function (opmltext) {">
								<outline text="if (opmltext !== undefined) {" created="Fri, 02 Jul 2021 20:57:28 GMT">
									<outline text="var theOutline = opml.parse (opmltext);" created="Fri, 02 Jul 2021 20:57:53 GMT"/>
									<outline text="processOutlineStruct (theOutline);" created="Thu, 02 Sep 2021 14:05:54 GMT"/>
									<outline text="}" created="Fri, 02 Jul 2021 20:57:39 GMT"/>
									</outline>
								<outline text="else {" created="Thu, 02 Sep 2021 13:41:39 GMT">
									<outline text="callback (false);" created="Thu, 02 Sep 2021 13:41:42 GMT"/>
									<outline text="}" created="Thu, 02 Sep 2021 13:41:46 GMT"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}" created="Mon, 18 Oct 2021 16:35:22 GMT"/>
							</outline>
						<outline text="}" created="Wed, 01 Sep 2021 20:21:45 GMT"/>
						</outline>
					<outline text="" created="Wed, 01 Sep 2021 20:23:03 GMT"/>
					<outline text="function startTabsIfHomePage (activeTabName, callback) { ">
						<outline text="Changes" isComment="true" created="Wed, 01 Sep 2021 17:02:50 GMT">
							<outline text="9/1/21; 1:02:55 PM by DW" created="Wed, 01 Sep 2021 17:02:54 GMT">
								<outline text="There are two top level divs, one for the home page and one for an archive page. " created="Wed, 01 Sep 2021 17:02:56 GMT"/>
								<outline text="Depending on which type of page we are, we make one of these visible." created="Wed, 01 Sep 2021 17:03:27 GMT"/>
								<outline text="The bodytext of the page is both in the blog tab and in the archive page tab." created="Wed, 01 Sep 2021 17:03:41 GMT"/>
								</outline>
							</outline>
						<outline text="if (config.flHomePage) {">
							<outline text="activeTabName = (activeTabName === undefined) ? tabs [0].id : activeTabName;" created="Wed, 01 Sep 2021 20:36:44 GMT"/>
							<outline text="tabs.forEach (function (item) {" created="Wed, 01 Sep 2021 17:10:47 GMT">
								<outline text="if (item.enabled ()) {" created="Wed, 01 Sep 2021 17:11:00 GMT">
									<outline text="var theTabListItem = $(&quot;&lt;li&gt;&lt;/li&gt;&quot;);" created="Wed, 01 Sep 2021 17:12:39 GMT"/>
									<outline text="" created="Wed, 01 Sep 2021 17:41:41 GMT"/>
									<outline text="if (item.id == activeTabName) {" created="Wed, 01 Sep 2021 17:41:41 GMT">
										<outline text="$(theTabListItem).addClass (&quot;active&quot;);" created="Wed, 01 Sep 2021 17:41:52 GMT"/>
										<outline text="if (item.viewer !== undefined) {" created="Wed, 01 Sep 2021 20:20:13 GMT">
											<outline text="item.viewer (function (fl) {" created="Wed, 01 Sep 2021 20:20:25 GMT">
												<outline text="});" created="Wed, 01 Sep 2021 21:04:15 GMT"/>
												</outline>
											<outline text="}" created="Wed, 01 Sep 2021 20:20:21 GMT"/>
											</outline>
										<outline text="}" created="Wed, 01 Sep 2021 17:41:47 GMT"/>
										</outline>
									<outline text="" created="Wed, 01 Sep 2021 17:41:42 GMT"/>
									<outline text="var theAnchor = $(&quot;&lt;a data-toggle=\&quot;tab\&quot;&gt;&lt;/a&gt;&quot;);" created="Wed, 01 Sep 2021 17:14:59 GMT"/>
									<outline text="var theIcon = $(&quot;&lt;i class=\&quot;iTabIcon fa fa-&quot; + item.icon + &quot;\&quot;&gt;&lt;/i&gt;&quot;);" created="Wed, 01 Sep 2021 17:16:09 GMT"/>
									<outline text="var theTitle = $(&quot;&lt;span class=\&quot;spTabItemTitle\&quot;&gt;&quot; + item.title + &quot;&lt;/span&gt;&quot;);" created="Wed, 01 Sep 2021 17:14:59 GMT"/>
									<outline text="" created="Wed, 01 Sep 2021 17:17:55 GMT"/>
									<outline text="theAnchor.append (theIcon);" created="Wed, 01 Sep 2021 17:17:55 GMT"/>
									<outline text="theAnchor.append (theTitle);" created="Wed, 01 Sep 2021 17:17:55 GMT"/>
									<outline text="theTabListItem.append (theAnchor);" created="Wed, 01 Sep 2021 17:17:56 GMT"/>
									<outline text="" created="Wed, 01 Sep 2021 17:19:30 GMT"/>
									<outline text="$(theTabListItem).click (function (event) {" created="Wed, 01 Sep 2021 17:19:30 GMT">
										<outline text="window.location.href = &quot;?tab=&quot; + item.id;"/>
										<outline text="event.stopPropagation ();"/>
										<outline text="event.preventDefault ();"/>
										<outline text="});" created="Wed, 01 Sep 2021 17:19:45 GMT"/>
										</outline>
									<outline text="" created="Wed, 01 Sep 2021 17:19:31 GMT"/>
									<outline text="$(&quot;#idTabList&quot;).append (theTabListItem);" created="Wed, 01 Sep 2021 17:17:56 GMT"/>
									<outline text="}" created="Wed, 01 Sep 2021 17:12:16 GMT"/>
									</outline>
								<outline text="});" created="Wed, 01 Sep 2021 17:10:56 GMT"/>
								</outline>
							<outline text="$(&quot;#idTabsPage&quot;).css (&quot;display&quot;, &quot;table-cell&quot;);"/>
							<outline text="$(&quot;#idTabsPage&quot;).css (&quot;display&quot;, &quot;block&quot;);" isComment="true"/>
							<outline text="callback ();"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="$(&quot;#idTabsPage&quot;).css (&quot;display&quot;, &quot;block&quot;)"/>
							<outline text="callback ();"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="//like -- 11/8/18 by DW">
					<outline text="const urlLikeServer = &quot;http://likes.scripting.com/&quot;;"/>
					<outline text=""/>
					<outline text="function ifConnected (confirmationPrompt, callback) { //12/15/18 by DW">
						<outline text="twStorageData.urlTwitterServer = urlLikeServer;"/>
						<outline text="if (twIsTwitterConnected ()) {">
							<outline text="callback ();"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="confirmDialog (confirmationPrompt, function () {">
								<outline text="twConnectToTwitter ();"/>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function serverCall (verb, params, callback, server, method, data) {">
						<outline text="Changes" isComment="true">
							<outline text="10/30/18; 12:22:05 PM by DW">
								<outline text="New optional params, method and data. Rewrite to use jQuery ajax routine instead of utilities routine. "/>
								</outline>
							<outline text="10/29/18; 10:34:00 AM by DW">
								<outline text="If accessToken param is not present, add it. "/>
								</outline>
							<outline text="9/25/18; 1:01:04 PM by DW">
								<outline text="New optional param, server."/>
								</outline>
							</outline>
						<outline text="const timeoutInMilliseconds = 30000;"/>
						<outline text="if (method === undefined) {">
							<outline text="method = &quot;GET&quot;;"/>
							<outline text="}"/>
							</outline>
						<outline text="if (params === undefined) {">
							<outline text="params = new Object ();"/>
							<outline text="}"/>
							</outline>
						<outline text="if (params.accessToken === undefined) { //10/29/18 by DW">
							<outline text="if (localStorage.twOauthToken !== undefined) {">
								<outline text="params.accessToken = localStorage.twOauthToken;"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="if (server === undefined) { //9/25/18 by DW">
							<outline text="server = urlLikeServer;"/>
							<outline text="}"/>
							</outline>
						<outline text="var apiUrl = server + verb;"/>
						<outline text="var paramString = buildParamList (params);"/>
						<outline text="if (paramString.length &gt; 0) {">
							<outline text="apiUrl += &quot;?&quot; + paramString;"/>
							<outline text="}"/>
							</outline>
						<outline text="console.log (&quot;serverCall: verb == &quot; + verb + &quot;, apiUrl == &quot; + apiUrl);" isComment="true"/>
						<outline text="" isComment="true"/>
						<outline text="var ajaxResult = $.ajax ({ ">
							<outline text="url: apiUrl,"/>
							<outline text="type: method,"/>
							<outline text="data: data,"/>
							<outline text="dataType: &quot;text&quot;, "/>
							<outline text="headers: undefined," created="Tue, 14 May 2013 14:35:06 GMT" pgfnum="23850"/>
							<outline text="timeout: timeoutInMilliseconds "/>
							<outline text="}) "/>
							</outline>
						<outline text=".success (function (data, status) { ">
							<outline text="callback (undefined, data);"/>
							<outline text="}) "/>
							</outline>
						<outline text=".error (function (status) { ">
							<outline text="for info about timeouts see this page." isComment="true">
								<outline text="http://stackoverflow.com/questions/3543683/determine-if-ajax-error-is-a-timeout"/>
								</outline>
							<outline text="console.log (&quot;serverCall: url == &quot; + apiUrl + &quot;, error == &quot; + jsonStringify (status));" created="Sun, 13 Jan 2013 14:34:21 GMT" pgfnum="17098"/>
							<outline text="callback ({message: &quot;Error reading the file.&quot;});"/>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function likeClick (idLikes, urlForLike) {">
						<outline text="ifConnected (&quot;Sign on to Twitter to enable Like/Unlike?&quot;, function () {">
							<outline text="var params = {">
								<outline text="oauth_token: localStorage.twOauthToken," created="Sat, 09 Aug 2014 15:42:28 GMT" pgfnum="43203"/>
								<outline text="oauth_token_secret: localStorage.twOauthTokenSecret," created="Sat, 09 Aug 2014 15:42:43 GMT" pgfnum="43205"/>
								<outline text="url: urlForLike"/>
								<outline text="};"/>
								</outline>
							<outline text="console.log (&quot;likeClick:&quot;);"/>
							<outline text="$(&quot;#&quot; + idLikes).blur ();"/>
							<outline text="serverCall (&quot;toggle&quot;, params, function (err, jsontext) {">
								<outline text="if (err) {">
									<outline text="console.log (&quot;likeClick: err == &quot; + jsonStringify (err));"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="var jstruct = JSON.parse (jsontext);"/>
									<outline text="console.log (&quot;likeClick: jstruct == &quot; + jsonStringify (jstruct));"/>
									<outline text="viewLikes (idLikes, urlForLike, jstruct.likes);"/>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="" isComment="true"/>
						<outline text="twStorageData.urlTwitterServer = urlLikeServer;" isComment="true"/>
						<outline text="if (twIsTwitterConnected ()) {" isComment="true">
							<outline text="var params = {">
								<outline text="oauth_token: localStorage.twOauthToken," created="Sat, 09 Aug 2014 15:42:28 GMT" pgfnum="43203"/>
								<outline text="oauth_token_secret: localStorage.twOauthTokenSecret," created="Sat, 09 Aug 2014 15:42:43 GMT" pgfnum="43205"/>
								<outline text="url: urlForLike"/>
								<outline text="};"/>
								</outline>
							<outline text="console.log (&quot;likeClick:&quot;);"/>
							<outline text="$(&quot;#&quot; + idLikes).blur ();"/>
							<outline text="serverCall (&quot;toggle&quot;, params, function (err, jsontext) {">
								<outline text="if (err) {">
									<outline text="console.log (&quot;likeClick: err == &quot; + jsonStringify (err));"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="var jstruct = JSON.parse (jsontext);"/>
									<outline text="console.log (&quot;likeClick: jstruct == &quot; + jsonStringify (jstruct));"/>
									<outline text="viewLikes (idLikes, urlForLike, jstruct.likes);"/>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="else {" isComment="true">
							<outline text="confirmDialog (&quot;Sign on to Twitter to enable Like/Unlike?&quot;, function () {">
								<outline text="twConnectToTwitter ();"/>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function getLikes (url, callback) {">
						<outline text="var params = {">
							<outline text="url: url"/>
							<outline text="};"/>
							</outline>
						<outline text="serverCall (&quot;likes&quot;, params, function (err, jsontext) {">
							<outline text="if (err) {">
								<outline text="console.log (&quot;getLikes: err == &quot; + jsonStringify (err));"/>
								<outline text="callback (err);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="var jstruct = JSON.parse (jsontext);"/>
								<outline text="console.log (&quot;getLikes: jstruct == &quot; + jsonStringify (jstruct));" isComment="true"/>
								<outline text="callback (undefined, jstruct);"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function getLikesArray (theArray, callback) { //2/7/20 by DW">
						<outline text="var params = {">
							<outline text="jsontext: jsonStringify (theArray)"/>
							<outline text="};"/>
							</outline>
						<outline text="serverCall (&quot;getlikesarray&quot;, params, function (err, jsontext) {">
							<outline text="if (err) {">
								<outline text="console.log (&quot;getLikesArray: err == &quot; + jsonStringify (err));"/>
								<outline text="callback (err);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="var jstruct = JSON.parse (jsontext);"/>
								<outline text="console.log (&quot;getLikes: jstruct == &quot; + jsonStringify (jstruct));" isComment="true"/>
								<outline text="callback (undefined, jstruct);"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function viewLikes (idLikes, myUrl, likes) { ">
						<outline text="Changes" isComment="true">
							<outline text="11/22/18; 1:55:46 PM by DW">
								<outline text="Instead of saying (thumb) 12 Likes say ">
									<outline text="(thumb) 12"/>
									</outline>
								</outline>
							<outline text="11/7/18; 3:49:43 PM by DW\">
								<outline text="&lt;span class=&quot;spLikes&quot;&gt;&lt;span class=&quot;spThumb&quot;&gt;&lt;a onclick=&quot;likeClick (15)&quot;&gt;&lt;i class=&quot;fa fa-thumbs-up&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&amp;nbsp;&lt;span rel=&quot;tooltip&quot; title=&quot;&quot; data-original-title=&quot;littleoutliner&quot;&gt;1 like&lt;/span&gt;&lt;/span&gt;" isComment="true"/>
								</outline>
							</outline>
						<outline text="function getThumbIcon (thumbDirection, flopen) {">
							<outline text="var open = &quot;&quot;;"/>
							<outline text="if (flopen) {">
								<outline text="open = &quot;o-&quot;;"/>
								<outline text="}"/>
								</outline>
							<outline text="return (&quot;&lt;span class=\&quot;spThumb\&quot;&gt;&lt;i class=\&quot;fa fa-thumbs-&quot; + open + thumbDirection + &quot;\&quot;&gt;&lt;/i&gt;&lt;/span&gt;&amp;nbsp;&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="var likesObject = $(&quot;#&quot; + idLikes);"/>
						<outline text="var ct = 0, likenames = &quot;&quot;, thumbDirection = &quot;up&quot;, flOpenThumb = true, myScreenname = twGetScreenName ();"/>
						<outline text="if (likes !== undefined) {">
							<outline text="likes.forEach (function (name) {">
								<outline text="ct++;"/>
								<outline text="likenames += name + &quot;, &quot;;"/>
								<outline text="if (name == myScreenname) {">
									<outline text="thumbDirection = &quot;down&quot;;"/>
									<outline text="flOpenThumb = false;"/>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="var theThumb = getThumbIcon (&quot;up&quot;, flOpenThumb);"/>
						<outline text="var theThumb = &quot;&lt;span class=\&quot;spThumb\&quot;&gt;&lt;i class=\&quot;fa fa-thumbs-o-&quot; + thumbDirection + &quot;\&quot;&gt;&lt;/i&gt;&lt;/span&gt;&amp;nbsp;&quot;;" isComment="true"/>
						<outline text=""/>
						<outline text="var ctLikes = ct; //11/22/18 by DW"/>
						<outline text="var ctLikes = ct + &quot; like&quot;;" isComment="true"/>
						<outline text="if (ct != 1) {" isComment="true">
							<outline text="ctLikes += &quot;s&quot;;"/>
							<outline text="}"/>
							</outline>
						<outline text=""/>
						<outline text="if (ct &gt; 0) {">
							<outline text="likenames = stringMid (likenames, 1, likenames.length - 2); //pop off comma and blank at end"/>
							<outline text="ctLikes = &quot;&lt;span rel=\&quot;tooltip\&quot; title=\&quot;&quot; + likenames + &quot;\&quot;&gt;&quot; + ctLikes + &quot;&lt;/span&gt;&quot;;"/>
							<outline text="}"/>
							</outline>
						<outline text="var htmltext = &quot;&lt;span class=\&quot;spLikes\&quot;&gt;&lt;a onclick=\&quot;likeClick ('&quot; + idLikes + &quot;', '&quot; + myUrl + &quot;')\&quot;&gt;&quot; + theThumb + &quot;&lt;/a&gt;&quot; + ctLikes + &quot;&lt;/span&gt;&quot;;"/>
						<outline text="likesObject.html (htmltext);"/>
						<outline text="$(&quot;[rel=\&quot;tooltip\&quot;]&quot;).tooltip ();"/>
						<outline text="$(&quot;.spThumb&quot;).hover (function () {" isComment="true">
							<outline text="console.log (&quot;hover&quot;);"/>
							<outline text="$(this).html (getThumbIcon (thumbDirection, false));"/>
							<outline text="});"/>
							</outline>
						<outline text="$(&quot;.spThumb&quot;).mouseleave (function () {" isComment="true">
							<outline text="console.log (&quot;mouseleave&quot;);"/>
							<outline text="$(this).html (getThumbIcon (thumbDirection, true));"/>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function getPostPermalink (theItem) { //12/15/18 by DW">
						<outline text="var href = undefined;"/>
						<outline text="if (theItem.className == &quot;divTitledItem&quot;) {">
							<outline text="if (config.flHomePage) {">
								<outline text="$(theItem).children (&quot;.divTitle&quot;).each (function () {">
									<outline text="$(this).children (&quot;a&quot;).each (function () {">
										<outline text="var myhref = $(this).attr (&quot;href&quot;);"/>
										<outline text="if (myhref !== undefined) {">
											<outline text="href = myhref;"/>
											<outline text="}"/>
											</outline>
										<outline text="});"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="href = window.location.href;"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="$(theItem).children (&quot;.spPermaLink&quot;).each (function () {">
								<outline text="$(this).children (&quot;a&quot;).each (function () {">
									<outline text="href = $(this).attr (&quot;href&quot;);"/>
									<outline text="});"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="return (href);"/>
						<outline text="}"/>
						</outline>
					<outline text="function getPostText (theItem) { //used in prompts, for example -- 12/16/18 by DW">
						<outline text="var theClass = $(theItem).attr (&quot;class&quot;), theText;"/>
						<outline text="switch (theClass) {">
							<outline text="case &quot;divSingularItem&quot;:">
								<outline text="theText = $(theItem).text ();"/>
								<outline text="break;"/>
								</outline>
							<outline text="case &quot;divTitledItem&quot;:">
								<outline text="$(theItem).children (&quot;.divTitle&quot;).each (function () {">
									<outline text="$(this).children (&quot;a&quot;).each (function () {">
										<outline text="var myhref = $(this).attr (&quot;href&quot;);"/>
										<outline text="if (myhref !== undefined) {">
											<outline text="theText = $(this).text ();"/>
											<outline text="}"/>
											</outline>
										<outline text="});"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="break;"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="return (theText);"/>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="//twitter comments -- 12/14/18 by DW">
					<outline text="const tweetCommentHashtag = &quot;#scriptingnews&quot;;"/>
					<outline text="const ctUrlInTweetChars = 23;"/>
					<outline text=""/>
					<outline text="function startTweetDialog (thePrompt, callback) {">
						<outline text="$(&quot;#idTweetDialogTitle&quot;).html (&quot;Enter your tweet here.&quot;);" isComment="true"/>
						<outline text="var tweetEditorOptions = {">
							<outline text="ctHashTagChars: tweetCommentHashtag.length + 1 + ctUrlInTweetChars + 1, "/>
							<outline text="prompt: thePrompt,"/>
							<outline text="placeholderText: &quot;This text will appear in the body of your tweet.&quot;,"/>
							<outline text="savedTweetText: &quot;&quot;,"/>
							<outline text="flCustomHtml: false,"/>
							<outline text="flCancelButton: true"/>
							<outline text="}"/>
							</outline>
						<outline text="startTweetEditor (&quot;idMyTweetEditor&quot;, tweetEditorOptions, callback);"/>
						<outline text="$(&quot;#idTweetDialog&quot;).modal (&quot;show&quot;);"/>
						<outline text="$(&quot;#idMyTweetEditor&quot;).keyup (function (event) {" isComment="true">
							<outline text="console.log (&quot;Keyup in #idMyTweetEditor.&quot;);"/>
							<outline text="autosize (this);"/>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function closeTweetDialog () {">
						<outline text="$(&quot;#idTweetDialog&quot;).modal (&quot;hide&quot;);"/>
						<outline text="}"/>
						</outline>
					<outline text="function addItemToFeed (params, callback) {">
						<outline text="params.oauth_token = localStorage.twOauthToken;"/>
						<outline text="params.oauth_token_secret = localStorage.twOauthTokenSecret;"/>
						<outline text="serverCall (&quot;addtofeed&quot;, params, function (err, jsontext) {">
							<outline text="if (err) {">
								<outline text="console.log (&quot;addItemToFeed: err == &quot; + jsonStringify (err));"/>
								<outline text="if (callback !== undefined) {">
									<outline text="callback (err);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="var jstruct = JSON.parse (jsontext);"/>
								<outline text="console.log (&quot;addItemToFeed: jstruct == &quot; + jsonStringify (jstruct));" isComment="true"/>
								<outline text="if (callback !== undefined) {">
									<outline text="callback (undefined, jstruct);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function postTweetComment (editedText, urlPermalink) {">
						<outline text="var tweetText = editedText + &quot; &quot; + tweetCommentHashtag + &quot; &quot; + urlPermalink;"/>
						<outline text="console.log (&quot;postTweetComment: tweetText == &quot; + tweetText);"/>
						<outline text="twStorageData.urlTwitterServer = urlLikeServer;"/>
						<outline text="twTweet (tweetText, &quot;&quot;, function (data) {">
							<outline text="console.log (jsonStringify (data));" isComment="true"/>
							<outline text="closeTweetDialog ();"/>
							<outline text="var urlTweet = &quot;https://twitter.com/&quot; + twGetScreenName () + &quot;/status/&quot; + data.id_str;"/>
							<outline text="window.open (urlTweet);"/>
							<outline text="var item = {">
								<outline text="link: urlTweet, "/>
								<outline text="text: editedText,"/>
								<outline text="category: tweetCommentHashtag,"/>
								<outline text="permalink: urlTweet "/>
								<outline text="};"/>
								</outline>
							<outline text="addItemToFeed (item, function (err, data) {">
								<outline text="console.log (jsonStringify (data));"/>
								<outline text="});"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function setupTwitterComments () {">
						<outline text="const shareIcon = &quot;&lt;i class=\&quot;fa fa-retweet\&quot;&gt;&lt;/i&gt;&quot;;"/>
						<outline text="const shareIcon = &quot;&lt;i class=\&quot;fa fa-share\&quot;&gt;&lt;/i&gt;&quot;;" isComment="true"/>
						<outline text="const shareIcon = &quot;&lt;i class=\&quot;fab fa-twitter\&quot;&gt;&lt;/i&gt;&quot;;" isComment="true"/>
						<outline text="const maxTextLengthForPrompt = 50;"/>
						<outline text="$(&quot;.divTitledItem, .divSingularItem&quot;).each (function () {">
							<outline text="var flCommentSetup = getBoolean ($(this).data (&quot;commentsetup&quot;)); //10/17/19 by DW"/>
							<outline text="if (!flCommentSetup) { //10/17/19 by DW">
								<outline text="var urlPermalink = getPostPermalink (this); "/>
								<outline text="var theText = getPostText (this);"/>
								<outline text="var theIcon = &quot;&lt;a title=\&quot;Click here to RT in Twitter.\&quot;&gt;&quot; + shareIcon + &quot;&lt;/a&gt;&quot;;"/>
								<outline text="var htmltext = &quot;&lt;span class=\&quot;spTwitterComment\&quot;&gt;&quot; + theIcon + &quot;&lt;/span&gt;&quot;;"/>
								<outline text="var theObject = $(htmltext);"/>
								<outline text="$(theObject).click (function () {">
									<outline text="ifConnected (&quot;Sign on to Twitter to enable comments?&quot;, function () {">
										<outline text="var thePrompt = &quot;RT: &quot; + maxLengthString (theText, maxTextLengthForPrompt);"/>
										<outline text="startTweetDialog (thePrompt, function (tweetText) {">
											<outline text="if (tweetText === undefined) { //user clicked Cancel">
												<outline text="closeTweetDialog ();"/>
												<outline text="}"/>
												</outline>
											<outline text="else {">
												<outline text="postTweetComment (tweetText, urlPermalink);"/>
												<outline text="}"/>
												</outline>
											<outline text="});"/>
											</outline>
										<outline text="});"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="$(this).append (theObject);"/>
								<outline text="$(this).attr (&quot;data-commentsetup&quot;, true); //indicate that we've been here -- 10/17/19 by DW"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="//how long running -- 8/9/19 by DW">
					<outline text="function howLongSinceStartAsString (whenStart) {">
						<outline text="var x = howLongSinceStart (whenStart);"/>
						<outline text="function getnum (num, units) {">
							<outline text="if (num != 1) {">
								<outline text="units += &quot;s&quot;;"/>
								<outline text="}"/>
								</outline>
							<outline text="return (num + &quot; &quot; + units);"/>
							<outline text="}"/>
							</outline>
						<outline text="return (getnum (x.years, &quot;year&quot;) + &quot;, &quot; + getnum (x.months, &quot;month&quot;) + &quot;, &quot; + getnum (x.days, &quot;day&quot;) + &quot;, &quot; + getnum (x.hours, &quot;hour&quot;) + &quot;, &quot; + getnum (x.minutes, &quot;minute&quot;) + &quot;, &quot; + getnum (x.seconds, &quot;second&quot;) + &quot;.&quot;);"/>
						<outline text="" isComment="true"/>
						<outline text="function daysInYear (year) {" isComment="true">
							<outline text="var flLeapYear = ((year % 400) == 0) || ((year % 100) != 0 &amp;&amp; ((year % 4) == 0));"/>
							<outline text="return ((flLeapYear) ? 366 : 365);"/>
							<outline text="}"/>
							</outline>
						<outline text="function daysInMonth (month, year) { " isComment="true">
							<outline text="return (new Date (year, month, 0).getDate ()); "/>
							<outline text="} "/>
							</outline>
						<outline text="const ctSecsInDay = 60 * 60 * 24;" isComment="true"/>
						<outline text="const ctMilliSecsInDay = 1000 * ctSecsInDay;" isComment="true"/>
						<outline text="const now = new Date ();" isComment="true"/>
						<outline text="var theYear = whenStart.getFullYear ();" isComment="true"/>
						<outline text="var ctDays = (now - whenStart) / ctMilliSecsInDay;" isComment="true"/>
						<outline text="var ctYears = 0;" isComment="true"/>
						<outline text="while (true) {" isComment="true">
							<outline text="if (ctDays &lt;= daysInYear (theYear)) {">
								<outline text="break;"/>
								<outline text="}"/>
								</outline>
							<outline text="ctDays -= daysInYear (theYear);"/>
							<outline text="ctYears++;"/>
							<outline text="theYear++;"/>
							<outline text="}"/>
							</outline>
						<outline text="" isComment="true"/>
						<outline text="var theMonth = 0, ctMonths = 0;" isComment="true"/>
						<outline text="while (true) {" isComment="true">
							<outline text=""/>
							<outline text="if (ctDays &lt; daysInMonth (theMonth, theYear)) {">
								<outline text="break;"/>
								<outline text="}"/>
								</outline>
							<outline text="ctDays -= daysInMonth (theMonth, theYear);"/>
							<outline text="ctMonths++;"/>
							<outline text="theMonth++;"/>
							<outline text="}"/>
							</outline>
						<outline text="" isComment="true"/>
						<outline text="const ctWholeDays = Math.floor (ctDays);" isComment="true"/>
						<outline text="var ctRemainingSecs = (ctDays - ctWholeDays) * ctSecsInDay;" isComment="true"/>
						<outline text="var ctHours = Math.floor (ctRemainingSecs / (60 * 60));" isComment="true"/>
						<outline text="ctRemainingSecs -= ctHours * 60 * 60;" isComment="true"/>
						<outline text="var ctMinutes = Math.floor (ctRemainingSecs / 60);" isComment="true"/>
						<outline text="ctRemainingSecs -= ctMinutes * 60;" isComment="true"/>
						<outline text="ctRemainingSecs = Math.floor (ctRemainingSecs);" isComment="true"/>
						<outline text="return (getnum (ctYears, &quot;year&quot;) + &quot;, &quot; + getnum (ctMonths, &quot;month&quot;) + &quot;, &quot; + getnum (ctWholeDays, &quot;day&quot;) + &quot;, &quot; + getnum (ctHours, &quot;hour&quot;) + &quot;, &quot; + getnum (ctMinutes, &quot;minute&quot;) + &quot;, &quot; + getnum (ctRemainingSecs, &quot;second&quot;) + &quot;.&quot;);" isComment="true"/>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="//infinite scrolling -- 10/17/19 by DW">
					<outline text="var whenLastMoreButtonClick = new Date (0);"/>
					<outline text="var currentOldestPageDate = undefined;"/>
					<outline text=""/>
					<outline text="function moreButtonClick () {">
						<outline text="Changes" isComment="true">
							<outline text="10/17/19; 11:33:25 AM by DW">
								<outline text="http://rockaway.scripting.com:1400/day?blog=dave&amp;day=2019-10-01T15:26:10.412Z"/>
								</outline>
							</outline>
						<outline text="if (currentOldestPageDate === undefined) {">
							<outline text="currentOldestPageDate = config.oldestDayOnHomePage;"/>
							<outline text="}"/>
							</outline>
						<outline text="var day = dateYesterday (currentOldestPageDate);"/>
						<outline text="var url = &quot;http://montana.scripting.com:1400/day?blog=dave&amp;day=&quot; + day.toUTCString ();"/>
						<outline text="currentOldestPageDate = day;"/>
						<outline text="readHttpFileThruProxy (url, undefined, function (htmltext) {">
							<outline text="if (htmltext !== undefined) {">
								<outline text="$(&quot;#idTabContent&quot;).append (&quot;&lt;div class=\&quot;divArchivePageDay\&quot;&gt;&quot; + htmltext + &quot;&lt;/div&gt;&quot;)"/>
								<outline text="setupJavaScriptFeatures ();"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function infiniteScrollHandler () {">
						<outline text="Changes" isComment="true">
							<outline text="7/4/20; 11:38:37 AM by DW">
								<outline text="Disabled the feature. "/>
								</outline>
							</outline>
						<outline text="window.onscroll = function (ev) {" isComment="true">
							<outline text="if ((window.innerHeight + window.scrollY) &gt;= document.body.offsetHeight) {">
								<outline text="if (secondsSince (whenLastMoreButtonClick) &gt; 1) {">
									<outline text="console.log (&quot;infiniteScrollHandler: you're at the bottom of the page&quot;);"/>
									<outline text="whenLastMoreButtonClick = new Date ();"/>
									<outline text="moreButtonClick (1);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="};"/>
							</outline>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="//view Radio3 links rewrite -- 10/1/21 by DW" isComment="true" created="Fri, 01 Oct 2021 14:17:57 GMT">
					<outline text="function viewRadio3Links (callback) {" created="Fri, 01 Oct 2021 14:10:43 GMT">
						<outline text="var linkbloghtmltext = &quot;&quot;;" created="Fri, 01 Oct 2021 14:29:13 GMT"/>
						<outline text="var pagetable = {" created="Fri, 01 Oct 2021 13:41:21 GMT">
							<outline text="homePageDateFormat: &quot;%A, %B %e, %Y&quot;,"/>
							<outline text="whenLinkblogStart: &quot;2021-08-26T21:47:54.261Z&quot;," isComment="true" created="Fri, 01 Oct 2021 13:53:31 GMT"/>
							<outline text="whenLinkblogStart: new Date (&quot;9/2/2021&quot;),"/>
							<outline text="twitterScreenname: undefined" created="Fri, 01 Oct 2021 13:44:03 GMT"/>
							<outline text="twitterScreenname: &quot;davewiner&quot;" isComment="true" created="Fri, 01 Oct 2021 13:44:03 GMT"/>
							<outline text="};" created="Fri, 01 Oct 2021 13:41:27 GMT"/>
							</outline>
						<outline text="" created="Fri, 01 Oct 2021 13:42:45 GMT"/>
						<outline text="var ctDaysOnPage = 25;"/>
						<outline text="var daysTable;"/>
						<outline text=""/>
						<outline text="function viewPagetable () {">
							<outline text="console.log (jsonStringify (pagetable));"/>
							<outline text="}"/>
							</outline>
						<outline text="function viewLastUpdate (when) {">
							<outline text="$(&quot;#idLastUdpate&quot;).html (formatDate (when, &quot;%a %d %b %Y, %r&quot;));"/>
							<outline text="}"/>
							</outline>
						<outline text="function appendDay (jstruct) {">
							<outline text="Changes " isComment="true">
								<outline text="5/28/17; 9:25:59 AM by DW">
									<outline text="Remove dependency on pagetable.homePageDateFormat."/>
									</outline>
								<outline text="10/15/14; 1:47:22 PM by DW">
									<outline text="urlSplitter doesn't do nice things with links that begin with a blank. It also shouldn't be possible for one badly formed item to kill the whole day. "/>
									</outline>
								</outline>
							<outline text="var htmltext = &quot;&quot;, indentlevel = 0;"/>
							<outline text="var dateFormat = &quot;%A, %B %e, %Y&quot;;"/>
							<outline text="try {dateFormat = pagetable.homePageDateFormat} catch (err) {};"/>
							<outline text="var datestring = formatDate (jstruct.when, dateFormat);"/>
							<outline text="var datestring = formatDate (jstruct.when, pagetable.homePageDateFormat);" isComment="true"/>
							<outline text="function add (s) {" created="Wed, 19 Jun 2013 18:21:56 GMT" pgfnum="26656">
								<outline text="htmltext += filledString (&quot;\t&quot;, indentlevel) + s + &quot;\n&quot;;" created="Wed, 19 Jun 2013 18:22:33 GMT" pgfnum="26661"/>
								<outline text="}" created="Wed, 19 Jun 2013 18:22:01 GMT" pgfnum="26658"/>
								</outline>
							<outline text="console.log (&quot;appendDay: &quot; + datestring);" isComment="true"/>
							<outline text="add (&quot;&lt;div class=\&quot;divLinkblogDayTitle\&quot;&gt;&quot; + datestring + &quot;&lt;/div&gt;&quot;);"/>
							<outline text="add (&quot;&lt;div class=\&quot;divLinkblogDay\&quot;&gt;&quot;); indentlevel++;"/>
							<outline text="for (var i = 0; i &lt; jstruct.dayHistory.length; i++) {">
								<outline text="try {">
									<outline text="var item = jstruct.dayHistory [i], linktext = &quot;&quot;, icon = &quot;&quot;;"/>
									<outline text="//set linktext, icon">
										<outline text="if ((item.link != undefined) &amp;&amp; (item.link.length &gt; 0)) {">
											<outline text="var splitUrl = urlSplitter (trimLeading (item.link, &quot; &quot;)); //10/15/14 by DW -- remove leading blanks"/>
											<outline text="var host = splitUrl.host;"/>
											<outline text="if (beginsWith (host, &quot;www.&quot;)) {">
												<outline text="host = stringDelete (host, 1, 4);"/>
												<outline text="}"/>
												</outline>
											<outline text="linktext = &quot; &lt;a class=\&quot;aHost\&quot; href=\&quot;&quot; + item.link + &quot;\&quot; target=\&quot;blank\&quot;&gt;&quot; + host + &quot;&lt;/a&gt;&quot;;"/>
											<outline text=""/>
											<outline text="icon = &quot;&lt;a href=\&quot;&quot; + item.link + &quot;\&quot; target=\&quot;_blank\&quot;&gt;&lt;img class=\&quot;imgFavicon\&quot; src=\&quot;&quot; + getFavicon (item.link) + &quot;\&quot;&gt;&lt;/a&gt;&quot;; //9/26/14 by DW" isComment="true"/>
											<outline text=""/>
											<outline text="}"/>
											</outline>
										</outline>
									<outline text="add (&quot;&lt;p&gt;&quot; + icon + item.text + linktext + &quot;&lt;/p&gt;&quot;);"/>
									<outline text="}"/>
									</outline>
								<outline text="catch (error) {">
									<outline text="console.log (&quot;appendDay: error == &quot; + error + &quot; while adding item == &quot; + item.text);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="add (&quot;&lt;/div&gt;&quot;); indentlevel--;"/>
							<outline text="$(&quot;#idLinkblogDays&quot;).append (htmltext);" isComment="true"/>
							<outline text="linkbloghtmltext += htmltext;" created="Fri, 01 Oct 2021 14:30:03 GMT"/>
							<outline text="}"/>
							</outline>
						<outline text="function loadOneDay (theDay, callback) {">
							<outline text="var urlFolder = &quot;http://radio3.io/users/&quot; + pagetable.twitterScreenname + &quot;/&quot;;"/>
							<outline text="var urlFolder = stringPopLastField (pagetable.homePageUrl, &quot;/&quot;) + &quot;/&quot;;" isComment="true"/>
							<outline text="var url = urlFolder + getDatePath (theDay) + &quot;history.json&quot;, whenReadStart = new Date ();"/>
							<outline text="readHttpFile (url, function (jsontext) {">
								<outline text="var jstruct = undefined;" created="Fri, 01 Oct 2021 13:47:16 GMT"/>
								<outline text="try {">
									<outline text="jstruct = JSON.parse (jsontext);"/>
									<outline text="}"/>
									</outline>
								<outline text="catch (err) {">
									<outline text="console.log (&quot;loadOneDay: err.message == &quot; + err.message);" created="Fri, 01 Oct 2021 13:46:47 GMT"/>
									<outline text="}"/>
									</outline>
								<outline text="if (callback !== undefined) {" created="Fri, 01 Oct 2021 13:47:25 GMT">
									<outline text="callback (jstruct);" created="Fri, 01 Oct 2021 13:47:32 GMT"/>
									<outline text="}" created="Fri, 01 Oct 2021 13:47:35 GMT"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="function loadDaysTable (callback) {">
							<outline text="Changes" isComment="true">
								<outline text="10/24/14; 6:03:57 PM by DW">
									<outline text="Add callback param."/>
									</outline>
								<outline text="9/3/14; 4:37:04 PM by DW">
									<outline text="Chris Dadswell reports that he's missing the first day of his blog. Not sure what's going on, I think it might be a timezone thing (he's in the UK). Instead of figuring it out, I go back one full day before the blogstart date. That will rule out that possibility. "/>
									</outline>
								<outline text="9/2/14; 7:36:11 AM by DW">
									<outline text="Stop looking when you hit the start date of the blog."/>
									</outline>
								</outline>
							<outline text="var whenBlogStart = dateYesterday (pagetable.whenLinkblogStart), whenstart = new Date ();"/>
							<outline text="function loadOne (theDay) {">
								<outline text="loadOneDay (theDay, function (jstruct) {">
									<outline text="var yesterday = dateYesterday (theDay);"/>
									<outline text="if (jstruct != undefined) {">
										<outline text="appendDay (jstruct); //why is this here? -- 11/6/14 by DW"/>
										<outline text="daysTable.unshift ({">
											<outline text="when: theDay,"/>
											<outline text="jstruct: jstruct"/>
											<outline text="});"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="if ((daysTable.length &lt; ctDaysOnPage) &amp;&amp; (dayGreaterThanOrEqual (yesterday, whenBlogStart))) {">
										<outline text="loadOne (yesterday);"/>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="if (callback != undefined) { //10/24/14 by DW">
											<outline text="callback ();"/>
											<outline text="}"/>
											</outline>
										<outline text="console.log (&quot;loadDaysTable: &quot; + secondsSince (whenstart) + &quot; secs.&quot;);"/>
										<outline text="}"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="daysTable = new Array ();"/>
							<outline text="loadOne (new Date ());"/>
							<outline text="}"/>
							</outline>
						<outline text="function viewDays () {">
							<outline text="$(&quot;#idLinkblogDays&quot;).html (&quot;&quot;);"/>
							<outline text="for (var i = daysTable.length - 1; i &gt;= 0; i--) {">
								<outline text="appendDay (daysTable [i].jstruct);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="function reloadTodaysLinks () {">
							<outline text="var now = new Date (), flfound = false;"/>
							<outline text="loadOneDay (now, function (jstruct) {">
								<outline text="for (var i = 0; i &lt; daysTable.length; i++) {">
									<outline text="if (daysTable [i] != undefined) {">
										<outline text="if (sameDay (daysTable [i].when, now)) {">
											<outline text="daysTable [i].jstruct = jstruct;"/>
											<outline text="flfound = true;"/>
											<outline text="}"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="if (!flfound) {">
									<outline text="daysTable.push (jstruct);"/>
									<outline text="delete daysTable [0];"/>
									<outline text="}"/>
									</outline>
								<outline text="viewDays ();"/>
								<outline text="viewLastUpdate (jstruct.when);"/>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="" created="Fri, 01 Oct 2021 13:38:16 GMT"/>
						<outline text="if (opmlHead.urlLinkblogJson === undefined) {" created="Sat, 02 Oct 2021 13:04:35 GMT">
							<outline text="callback (undefined);" created="Sat, 02 Oct 2021 13:29:18 GMT"/>
							<outline text="}" created="Sat, 02 Oct 2021 13:06:43 GMT"/>
							</outline>
						<outline text="else {" created="Sat, 02 Oct 2021 13:10:03 GMT">
							<outline text="var url = opmlHead.urlLinkblogJson;" created="Sat, 02 Oct 2021 13:11:44 GMT"/>
							<outline text="var splits = url.split (&quot;/&quot;);" created="Sat, 02 Oct 2021 13:11:44 GMT"/>
							<outline text="pagetable.twitterScreenname = splits [4];" created="Sat, 02 Oct 2021 13:11:44 GMT"/>
							<outline text="loadDaysTable (function () {">
								<outline text="viewDays ();"/>
								<outline text="callback (linkbloghtmltext);" created="Fri, 01 Oct 2021 14:30:47 GMT"/>
								<outline text="});"/>
								</outline>
							<outline text="}" created="Sat, 02 Oct 2021 13:10:05 GMT"/>
							</outline>
						<outline text="" created="Sat, 02 Oct 2021 13:04:35 GMT"/>
						<outline text="" created="Sat, 02 Oct 2021 13:04:35 GMT"/>
						<outline text="" created="Sat, 02 Oct 2021 13:04:35 GMT"/>
						<outline text="}" created="Fri, 01 Oct 2021 14:10:53 GMT"/>
						</outline>
					</outline>
				<outline text="function toggleTwitterConnect () {">
					<outline text="toggleConnect ();" isComment="true"/>
					<outline text="twStorageData.urlTwitterServer = urlLikeServer; //8/21/19 by DW"/>
					<outline text="twToggleConnectCommand ();"/>
					<outline text="updateTwitterButton ();"/>
					<outline text="}"/>
					</outline>
				<outline text="function updateTwitterButton () {">
					<outline text="var buttontext = twStorageConsts.fontAwesomeIcon + &quot; Sign &quot; + ((twIsTwitterConnected ()) ? &quot;off&quot; : &quot;on&quot;);"/>
					<outline text="$(&quot;#idToggleConnect&quot;).html (buttontext);"/>
					<outline text="if ($(&quot;#idTwitterButton&quot;).html () != buttontext) {" isComment="true">
						<outline text="$(&quot;#idTwitterButton&quot;).html (buttontext);" created="Wed, 03 Apr 2013 16:41:18 GMT" pgfnum="1226"/>
						<outline text="}"/>
						</outline>
					<outline text="if ($(&quot;#idTwitterButton&quot;).css (&quot;visibility&quot;) != &quot;visible&quot;) {" isComment="true">
						<outline text="$(&quot;#idTwitterButton&quot;).css (&quot;visibility&quot;, &quot;visible&quot;);"/>
						<outline text="}"/>
						</outline>
					<outline text="//set screen name" isComment="true">
						<outline text="var name = localStorage.twScreenName;"/>
						<outline text="var url = &quot;http://twitter.com/&quot; + name;"/>
						<outline text="var script = &quot;openUrl ('&quot; + url + &quot;')&quot;;"/>
						<outline text="var linktoname = &quot;&lt;a onclick=\&quot;&quot; + script + &quot;\&quot;&gt;&quot; + name + &quot;&lt;/a&gt;&quot;"/>
						<outline text="var linktoname = &quot;&lt;a href=\&quot;http://twitter.com/&quot; + name + &quot;\&quot; target=\&quot;_blank\&quot;&gt;&quot; + name + &quot;&lt;/a&gt;&quot;" isComment="true"/>
						<outline text="linktoname = (twIsTwitterConnected ()) ? linktoname : &quot;&quot;;"/>
						<outline text="if ($(idScreenName).html () != linktoname) {">
							<outline text="$(idScreenName).html (linktoname);" created="Wed, 03 Apr 2013 16:41:18 GMT" pgfnum="1226"/>
							<outline text="}"/>
							</outline>
						<outline text="if ($(&quot;#idTwitterUsername&quot;).html () != name) {">
							<outline text="$(&quot;#idTwitterUsername&quot;).html (name);"/>
							<outline text="}"/>
							</outline>
						<outline text="twUpdateTwitterMenuItem (&quot;idTwitterConnectMenuItem&quot;);"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function setTextSize (amount) {" isComment="true">
					<outline text=""/>
					<outline text="function getFontSize (x) {">
						<outline text="var att = $(x).css (&quot;font-size&quot;);"/>
						<outline text="att = stringMid (att, 1, att.length - 2); //pop off px"/>
						<outline text="var size = Number (att);"/>
						<outline text="console.log (&quot;getFontSize: size == &quot; + size);"/>
						<outline text="return (size);"/>
						<outline text="}"/>
						</outline>
					<outline text="function bumpFontSize (x) {">
						<outline text="var newsize = getFontSize (x) + amount;"/>
						<outline text="if (newsize &gt; 0) {">
							<outline text="$(x).css (&quot;font-size&quot;, newsize);"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text=""/>
					<outline text="$(&quot;.divSingularItem&quot;).each (function () {">
						<outline text="bumpFontSize (this);"/>
						<outline text="$(this).css (&quot;font-size&quot;, getFontSize (this) + amount);" isComment="true"/>
						<outline text="$(this).css (&quot;color&quot;, &quot;green&quot;);" isComment="true"/>
						<outline text="});"/>
						</outline>
					<outline text="$(&quot;.spTitleLink&quot;).each (function () {">
						<outline text="bumpFontSize (this);"/>
						<outline text="$(this).css (&quot;color&quot;, &quot;purple&quot;);" isComment="true"/>
						<outline text="});"/>
						</outline>
					<outline text="$(&quot;.divTitledItem li&quot;).each (function () {">
						<outline text="bumpFontSize (this);"/>
						<outline text="$(this).css (&quot;color&quot;, &quot;orange&quot;);" isComment="true"/>
						<outline text="});"/>
						</outline>
					<outline text="$(&quot;.divDayTitle a&quot;).each (function () {">
						<outline text="bumpFontSize (this);"/>
						<outline text="$(this).css (&quot;color&quot;, &quot;silver&quot;);" isComment="true"/>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function increaseTextSize () { //5/19/18 by DW" isComment="true">
					<outline text="$(&quot;#idTextSizePlus&quot;).blur (); "/>
					<outline text="setTextSize (1);"/>
					<outline text="alert (&quot;increaseTextSize&quot;);" isComment="true"/>
					<outline text="}"/>
					</outline>
				<outline text="function decreaseTextSize () { //5/19/18 by DW" isComment="true">
					<outline text="$(&quot;#idTextSizeMinus&quot;).blur (); "/>
					<outline text="setTextSize (-1);"/>
					<outline text="alert (&quot;decreaseTextSize&quot;);" isComment="true"/>
					<outline text="}"/>
					</outline>
				<outline text="function initWedge (domObject, clickCallback) { //the caret goes to the left of the object -- 7/24/17 by DW">
					<outline text="var theIcon = $(&quot;&lt;i class=\&quot;&quot; + rightCaret + &quot;\&quot;&gt;&lt;/i&gt;&quot;);"/>
					<outline text="var theWedge = $(&quot;&lt;span class=\&quot;spScriptingNewsWedge\&quot;&gt;&lt;/span&gt;&quot;);"/>
					<outline text="$(theWedge).append (theIcon);"/>
					<outline text="$(domObject).prepend (theWedge);"/>
					<outline text="theWedge.click (function () {">
						<outline text="var className = $(theIcon).attr (&quot;class&quot;);"/>
						<outline text="if (className == rightCaret) {">
							<outline text="clickCallback (true); //expand"/>
							<outline text="$(theIcon).attr (&quot;class&quot;, downCaret);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="clickCallback (false); //collapse"/>
							<outline text="$(theIcon).attr (&quot;class&quot;, rightCaret);"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="return (theWedge);"/>
					<outline text="}"/>
					</outline>
				<outline text="function setupExpandableType (attname, htmlTemplate) {">
					<outline text="function fixYoutubeUrl (url) { //3/18/18; by DW">
						<outline text="Changes" isComment="true">
							<outline text="3/18/18; 2:29:29 PM by DW">
								<outline text="Accept a URL in either of these forms and return a URL in the second form.">
									<outline text="https://www.youtube.com/watch?v=YedqV4Gl_us"/>
									<outline text="https://www.youtube.com/embed/YedqV4Gl_us"/>
									</outline>
								</outline>
							</outline>
						<outline text="const prefix = &quot;https://www.youtube.com/watch?v=&quot;;"/>
						<outline text="if (beginsWith (url, prefix)) {">
							<outline text="url = &quot;https://www.youtube.com/embed/&quot; + stringDelete (url, 1, prefix.length);"/>
							<outline text="}"/>
							</outline>
						<outline text="return (url);"/>
						<outline text="}"/>
						</outline>
					<outline text="$(&quot;.divPageBody li, .divSingularItem&quot;).each (function () {">
						<outline text="var parentOfTweet = this, theObject = undefined;"/>
						<outline text="var theText = $(this).text ();"/>
						<outline text="var attval = $(this).data (attname.toLowerCase ());"/>
						<outline text="if (attval !== undefined) {">
							<outline text="if (attname == &quot;urlvideo&quot;) { //3/18/18; by DW">
								<outline text="attval = fixYoutubeUrl (attval);"/>
								<outline text="}"/>
								</outline>
							<outline text="initWedge (parentOfTweet, function (flExpand) {">
								<outline text="function exposetheObject () {">
									<outline text="$(theObject).slideDown (0, 0, function () {">
										<outline text="$(theObject).css (&quot;visibility&quot;, &quot;visible&quot;);"/>
										<outline text="});"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="function exposetheObject () {" isComment="true">
									<outline text="$(theObject).slideDown (75, undefined, function () {">
										<outline text="$(theObject).css (&quot;visibility&quot;, &quot;visible&quot;);"/>
										<outline text="});"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="if (flExpand) {">
									<outline text="if (theObject === undefined) {">
										<outline text="let htmltext = replaceAll (htmlTemplate, &quot;[%attval%]&quot;, attval);"/>
										<outline text="theObject = $(htmltext);"/>
										<outline text="$(parentOfTweet).append (theObject);"/>
										<outline text="exposetheObject ();"/>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="exposetheObject ();"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="$(theObject).slideUp (0, 0, function () {">
										<outline text="});"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function setupExpandableImages () {">
					<outline text="setupExpandableType (&quot;urlexpandableimage&quot;, &quot;&lt;img class=\&quot;imgExpandable\&quot; src=\&quot;[%attval%]\&quot;&gt;&quot;);"/>
					<outline text="}"/>
					</outline>
				<outline text="function setupExpandableVideo () {">
					<outline text="setupExpandableType (&quot;urlvideo&quot;, &quot;&lt;iframe width=\&quot;560\&quot; height=\&quot;315\&quot; src=\&quot;[%attval%]\&quot; frameborder=\&quot;0\&quot; allowfullscreen&gt;&lt;/iframe&gt;&quot;);"/>
					<outline text="}"/>
					</outline>
				<outline text="function setupGists () { //12/20/21 by DW" created="Mon, 20 Dec 2021 22:13:21 GMT">
					<outline text="var template = &quot;&lt;iframe width=\&quot;560\&quot; height=\&quot;315\&quot; src=\&quot;[%attval%].js\&quot;&gt;&lt;/iframe&gt;&quot;;" created="Mon, 20 Dec 2021 22:07:35 GMT"/>
					<outline text="setupExpandableType (&quot;urlgist&quot;, template);"/>
					<outline text="}" created="Mon, 20 Dec 2021 22:13:30 GMT"/>
					</outline>
				<outline text="function setupExpandableDisqusThreads () {">
					<outline text="const myDisqusGroup = &quot;scripting&quot;;"/>
					<outline text=""/>
					<outline text="function getDisqusCommentsText (thispageurl, disqusGroup) {">
						<outline text="var s = &quot;&quot;;"/>
						<outline text="if (disqusGroup === undefined) {">
							<outline text="disqusGroup = myDisqusGroup;"/>
							<outline text="}"/>
							</outline>
						<outline text="if (thispageurl === undefined) {">
							<outline text="thispageurl = window.location.href;"/>
							<outline text="}"/>
							</outline>
						<outline text="var disqusTextArray = [">
							<outline text="&quot;\n&lt;div class=\&quot;divDisqusComments\&quot;&gt;\n&quot;,">
								<outline text="&quot;\t&lt;div id=\&quot;disqus_thread\&quot;&gt;&lt;/div&gt;\n&quot;,"/>
								<outline text="&quot;\t&lt;script&gt;\n&quot;,">
									<outline text="&quot;\t\tvar disqus_config = function () {\n&quot;,">
										<outline text="&quot;\t\t\tthis.page.url = \&quot;&quot; + thispageurl + &quot;\&quot;; \n&quot;,"/>
										<outline text="&quot;\t\t\t};\n&quot;,"/>
										</outline>
									<outline text="&quot;\t\t(function () {  \n&quot;,">
										<outline text="&quot;\t\t\tvar d = document, s = d.createElement ('script');\n&quot;,"/>
										<outline text="&quot;\t\t\ts.src = '//&quot; + disqusGroup + &quot;.disqus.com/embed.js';  \n&quot;,"/>
										<outline text="&quot;\t\t\ts.setAttribute ('data-timestamp', +new Date());\n&quot;,"/>
										<outline text="&quot;\t\t\t(d.head || d.body).appendChild(s);\n&quot;,"/>
										<outline text="&quot;\t\t\t})();\n&quot;,"/>
										</outline>
									<outline text="&quot;\t\t&lt;/script&gt;\n&quot;,"/>
									</outline>
								<outline text="&quot;\t&lt;/div&gt;\n&quot;"/>
								</outline>
							<outline text="];"/>
							</outline>
						<outline text="for (var i = 0; i &lt; disqusTextArray.length; i++) {">
							<outline text="s += disqusTextArray [i];"/>
							<outline text="}"/>
							</outline>
						<outline text="console.log (&quot;getDisqusCommentsText: &quot; + s);"/>
						<outline text=""/>
						<outline text="return (s)"/>
						<outline text="}"/>
						</outline>
					<outline text=""/>
					<outline text="function startDisqus (disqusGroup) {">
						<outline text="(function() {">
							<outline text="var dsq = document.createElement ('script'); dsq.type = 'text/javascript'; dsq.async = true;"/>
							<outline text="dsq.src = '//' + disqusGroup + '.disqus.com/embed.js';"/>
							<outline text="$(&quot;body&quot;).appendChild (dsq);"/>
							<outline text="})();"/>
							</outline>
						<outline text="(function() {" isComment="true">
							<outline text="var s = document.createElement('script'); s.async = true;"/>
							<outline text="s.type = 'text/javascript';"/>
							<outline text="s.src = '//' + disqusGroup + '.disqus.com/count.js';"/>
							<outline text="(document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);"/>
							<outline text="}());"/>
							</outline>
						<outline text="}"/>
						<outline text=""/>
						</outline>
					<outline text="setupExpandableType (&quot;flExpandableDisqusThread&quot;, &quot;&lt;div class=\&quot;divDisqusThread\&quot;&gt;&lt;div id=\&quot;disqus_thread\&quot;&gt;&lt;/div&gt;&lt;/div&gt;&quot;);"/>
					<outline text="startDisqus (myDisqusGroup);"/>
					<outline text="}"/>
					</outline>
				<outline text="function setupExpandableImages () {" isComment="true">
					<outline text="$(&quot;.divPageBody li, .divSingularItem&quot;).each (function () {">
						<outline text="var parentOfTweet = this, imageObject = undefined;"/>
						<outline text="var theText = $(this).text ();"/>
						<outline text="var urlExpandableImage = $(this).data (&quot;urlexpandableimage&quot;);"/>
						<outline text="if (urlExpandableImage !== undefined) {">
							<outline text="initWedge (parentOfTweet, function (flExpand) {">
								<outline text="function exposeImageObject () {">
									<outline text="$(imageObject).slideDown (75, undefined, function () {">
										<outline text="$(imageObject).on (&quot;load&quot;, function () {" isComment="true">
											<outline text="$(imageObject).css (&quot;visibility&quot;, &quot;visible&quot;);"/>
											<outline text="});"/>
											</outline>
										<outline text="$(imageObject).css (&quot;visibility&quot;, &quot;visible&quot;);"/>
										<outline text="});"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="if (flExpand) {">
									<outline text="if (imageObject === undefined) {">
										<outline text="imageObject = $(&quot;&lt;img class=\&quot;imgExpandable\&quot; src=\&quot;&quot; + urlExpandableImage + &quot;\&quot;&gt;&quot;);"/>
										<outline text="$(parentOfTweet).append (imageObject);"/>
										<outline text="exposeImageObject ();"/>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="exposeImageObject ();"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="$(imageObject).slideUp (75);"/>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function setupTweets () {">
					<outline text="Changes" isComment="true">
						<outline text="12/22/19; 11:35:24 AM by DW">
							<outline text="I want to use a single-purpose server to get embed codes from Twitter. The former code, part of the nodeStorage API, is hard to modify and it has gotten very slow for scripting.com. It's worth having a dedicated server for this application. Note there will be problems if we try to integrate this code into an Electron app, per the comments in the API code. "/>
							</outline>
						</outline>
					<outline text="function getEmbedCode (id, callback) {">
						<outline text="var url = &quot;https://api.twitter.com/1/statuses/oembed.json?id=&quot; + id;" isComment="true"/>
						<outline text="readHttpFileThruProxy (url, undefined, function (jsontext) {" isComment="true">
							<outline text="if (jsontext === undefined) {">
								<outline text="callback (undefined);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="try {">
									<outline text="var jstruct = JSON.parse (jsontext);"/>
									<outline text="callback (jstruct);"/>
									<outline text="}"/>
									</outline>
								<outline text="catch (err) {">
									<outline text="callback (undefined);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="var url = &quot;http://twitterembed.scripting.com/getembedcode?id=&quot; + encodeURIComponent (id);"/>
						<outline text="$.ajax ({">
							<outline text="type: &quot;GET&quot;,"/>
							<outline text="url: url,"/>
							<outline text="success: function (data) {">
								<outline text="callback (data);" created="Wed, 23 Apr 2014 17:17:13 GMT" pgfnum="40481"/>
								<outline text="},"/>
								</outline>
							<outline text="error: function (status) { ">
								<outline text="console.log (&quot;getEmbedCode: error == &quot; + JSON.stringify (status, undefined, 4));" created="Wed, 12 Jun 2013 13:14:10 GMT" pgfnum="25848"/>
								<outline text="callback (undefined); " created="Wed, 23 Apr 2014 17:17:13 GMT" pgfnum="40481"/>
								<outline text="},"/>
								</outline>
							<outline text="dataType: &quot;json&quot;"/>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function viewTweet (idTweet, idDiv, callback) { //12/22/19 by DW">
						<outline text="var idViewer = &quot;#&quot; + idDiv, now = new Date ();"/>
						<outline text="if (idTweet == undefined) {" created="Fri, 20 Jun 2014 18:37:12 GMT" pgfnum="42321">
							<outline text="$(idViewer).html (&quot;&quot;);" created="Wed, 03 Apr 2013 16:41:18 GMT" pgfnum="1226"/>
							<outline text="}" created="Fri, 20 Jun 2014 18:37:18 GMT" pgfnum="42322"/>
							</outline>
						<outline text="else {" created="Fri, 20 Jun 2014 18:37:47 GMT" pgfnum="42323">
							<outline text="getEmbedCode (idTweet, function (struct) {" created="Fri, 20 Jun 2014 18:30:17 GMT" pgfnum="42312">
								<outline text="$(idViewer).css (&quot;visibility&quot;, &quot;hidden&quot;);"/>
								<outline text="$(idViewer).html (struct.html);" created="Wed, 03 Apr 2013 16:41:18 GMT" pgfnum="1226"/>
								<outline text="if (callback != undefined) {">
									<outline text="callback (struct);"/>
									<outline text="}"/>
									</outline>
								<outline text="});" created="Fri, 20 Jun 2014 18:31:03 GMT" pgfnum="42313"/>
								</outline>
							<outline text="}" created="Fri, 20 Jun 2014 18:37:50 GMT" pgfnum="42324"/>
							</outline>
						<outline text="$(idViewer).on (&quot;load&quot;, function () {">
							<outline text="$(idViewer).css (&quot;visibility&quot;, &quot;visible&quot;);"/>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="$(&quot;.divPageBody li, .divSingularItem&quot;).each (function () {">
						<outline text="var parentOfTweet = this, tweetObject = undefined;"/>
						<outline text="var theText = $(this).text ();"/>
						<outline text="console.log (&quot;setupTweets: theText == &quot; + maxStringLength (theText, 25));" isComment="true"/>
						<outline text="var urlTweet = $(this).data (&quot;urltweet&quot;);"/>
						<outline text=""/>
						<outline text="var tweetId = $(this).data (&quot;tweetid&quot;), tweetUserName = $(this).data (&quot;tweetusername&quot;); //11/16/17 by DW"/>
						<outline text="if ((tweetId !== undefined) &amp;&amp; (tweetUserName !== undefined) &amp;&amp; (urlTweet === undefined)) {">
							<outline text="https://twitter.com/davewiner/status/931224311582593024" isComment="true"/>
							<outline text="urlTweet = &quot;https://twitter.com/&quot; + tweetUserName + &quot;/status/&quot; + tweetId;"/>
							<outline text="}"/>
							</outline>
						<outline text=""/>
						<outline text="if (urlTweet !== undefined) {">
							<outline text="let idTweet = stringLastField (urlTweet, &quot;/&quot;);"/>
							<outline text="console.log (&quot;setupTweets: theText == &quot; + maxStringLength (theText, 25));" isComment="true"/>
							<outline text="initWedge (parentOfTweet, function (flExpand) {">
								<outline text="$(this).blur (); //12/22/19 by DW"/>
								<outline text="function exposeTweetObject () {">
									<outline text="$(tweetObject).slideDown (75, undefined, function () {">
										<outline text="$(tweetObject).css (&quot;display&quot;, &quot;block&quot;);" isComment="true"/>
										<outline text="$(tweetObject).on (&quot;load&quot;, function () {">
											<outline text="$(tweetObject).css (&quot;visibility&quot;, &quot;visible&quot;);"/>
											<outline text="});"/>
											</outline>
										<outline text="});"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="if (flExpand) {">
									<outline text="if (tweetObject === undefined) {">
										<outline text="let tweetObjectId = &quot;tweet&quot; + idTweet;"/>
										<outline text="let htmltext = &quot;&lt;div class=\&quot;divEmbeddedTweet\&quot; id=\&quot;&quot; + tweetObjectId + &quot;\&quot;&gt;&lt;/div&gt;&quot;;"/>
										<outline text="tweetObject = $(htmltext);"/>
										<outline text="$(parentOfTweet).append (tweetObject);"/>
										<outline text="if (twStorageData.urlTwitterServer === undefined) { //11/15/18 by DW">
											<outline text="console.log (&quot;setupTweets: twStorageData.urlTwitterServer == undefined&quot;);"/>
											<outline text="twStorageData.urlTwitterServer = urlLikeServer; //whack the bug -- 11/23/18 by DW"/>
											<outline text="}"/>
											</outline>
										<outline text="viewTweet (idTweet, tweetObjectId, function () {">
											<outline text="exposeTweetObject ();"/>
											<outline text="});"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="exposeTweetObject ();"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="$(tweetObject).slideUp (75);"/>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function setupMastodonToots () { //4/9/23 by DW" created="Sun, 09 Apr 2023 14:47:37 GMT">
					<outline text="$(&quot;.divPageBody li, .divSingularItem&quot;).each (function () {">
						<outline text="const urltoot = $(this).data (&quot;urltoot&quot;);" created="Sun, 09 Apr 2023 14:48:33 GMT"/>
						<outline text="var parentOfToot = this, tootObject = undefined;" created="Sun, 09 Apr 2023 15:38:45 GMT"/>
						<outline text="if (urltoot !== undefined) {" created="Sun, 09 Apr 2023 14:48:51 GMT">
							<outline text="console.log (&quot;setupMastodonToots: urltoot == &quot; + urltoot); " created="Sun, 09 Apr 2023 14:49:04 GMT"/>
							<outline text="initWedge (parentOfToot, function (flExpand) {">
								<outline text="if (flExpand) {">
									<outline text="function exposeTootObject () {">
										<outline text="$(tootObject).slideDown (75, undefined, function () {">
											<outline text="$(tootObject).css (&quot;visibility&quot;, &quot;visible&quot;);"/>
											<outline text="});"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="if (tootObject === undefined) {">
										<outline text="https://mastodon.social/api/oembed?url=https://mastodon.social/@andypiper/108237453365199182" isComment="true"/>
										<outline text="const domain = urltoot.split (&quot;/&quot;) [2];" created="Sun, 09 Apr 2023 14:59:10 GMT"/>
										<outline text="const urlembed = &quot;https://&quot; + domain + &quot;/api/oembed?url=&quot; + encodeURIComponent (urltoot);" created="Sun, 09 Apr 2023 15:00:46 GMT"/>
										<outline text="readHttpFile (urlembed, function (jsontext) {" created="Sun, 09 Apr 2023 16:19:30 GMT">
											<outline text="if (jsontext !== undefined) {" created="Sun, 09 Apr 2023 16:19:56 GMT">
												<outline text="const jstruct = JSON.parse (jsontext);" created="Sun, 09 Apr 2023 15:07:02 GMT"/>
												<outline text="console.log (&quot;setupMastodonToots: jsontext == &quot; + jsonStringify (jstruct));" created="Sun, 09 Apr 2023 14:49:04 GMT"/>
												<outline text="tootObject = $(&quot;&lt;div class=\&quot;divEmbeddedToot\&quot;&gt;&lt;/div&gt;&quot;);" created="Sun, 09 Apr 2023 15:30:00 GMT"/>
												<outline text="const embeddedObject = $(jstruct.html);" created="Sun, 09 Apr 2023 15:33:56 GMT"/>
												<outline text="embeddedObject.attr (&quot;width&quot;, 500);"/>
												<outline text="$(tootObject).append (embeddedObject);" created="Sun, 09 Apr 2023 15:32:44 GMT"/>
												<outline text="$(parentOfToot).append (tootObject);"/>
												<outline text="exposeTootObject ();"/>
												<outline text="}" created="Sun, 09 Apr 2023 16:19:56 GMT"/>
												</outline>
											<outline text="});" created="Sun, 09 Apr 2023 16:19:31 GMT"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="exposeTootObject ();"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="$(tootObject).slideUp (75);"/>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}" created="Sun, 09 Apr 2023 14:49:03 GMT"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}" created="Sun, 09 Apr 2023 14:47:46 GMT"/>
					</outline>
				<outline text="function setupExpandableOutline () {">
					<outline text="$(&quot;.divPageBody li&quot;).each (function () {">
						<outline text="var ul = $(this).next ();"/>
						<outline text="var parentOfTweet = this, tweetObject = undefined;"/>
						<outline text="var theText = $(this).text ();"/>
						<outline text="var collapse = $(this).data (&quot;collapse&quot;);"/>
						<outline text="if (getBoolean (collapse)) {">
							<outline text="initWedge (this, function (flExpand) {">
								<outline text="$(ul).css (&quot;color&quot;, (flExpand) ? &quot;purple&quot; : &quot;gray&quot;);" isComment="true"/>
								<outline text="if (flExpand) {">
									<outline text="$(ul).slideDown (75, undefined, function () {">
										<outline text="$(ul).css (&quot;display&quot;, &quot;block&quot;);"/>
										<outline text="});"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="$(ul).slideUp (75);"/>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function setupXrefs () {">
					<outline text="Changes" isComment="true">
						<outline text="2/6/20; 12:41:31 PM by DW">
							<outline text="Changed scripting.com/items/ to scripting.com/data/items/. The folder moved on the server. "/>
							</outline>
						<outline text="7/13/18; 10:21:32 AM by DW">
							<outline text="Handle xrefs that point to story pages."/>
							</outline>
						</outline>
					<outline text="$(&quot;.divPageBody li, .divSingularItem&quot;).each (function () {">
						<outline text="var theText = $(this).text ();"/>
						<outline text="var xref = $(this).data (&quot;xref&quot;);"/>
						<outline text="if (xref !== undefined) {">
							<outline text="var theListItem = this, outlineObject = undefined;"/>
							<outline text="var fname, folder, url;"/>
							<outline text="if (stringContains (xref, &quot;#&quot;)) {">
								<outline text="fname = &quot;a&quot; + stringDelete (stringNthField (xref, &quot;#&quot;, 2), 1, 1) + &quot;.json&quot;"/>
								<outline text="folder = replaceAll (stringNthField (xref, &quot;#&quot;, 1),  &quot;.html&quot;, &quot;&quot;);"/>
								<outline text="}"/>
								</outline>
							<outline text="else { //handle xrefs that point to story pages -- 7/13/18 by DW">
								<outline text="fname = &quot;a&quot; + stringPopExtension (stringLastField (xref, &quot;/&quot;)) + &quot;.json&quot;;"/>
								<outline text="folder = stringPopLastField (xref, &quot;/&quot;);"/>
								<outline text="}"/>
								</outline>
							<outline text="url = replaceAll (folder, &quot;scripting.com/&quot;, &quot;scripting.com/data/items/&quot;) + &quot;/&quot; + fname; //2/6/20 by DW"/>
							<outline text=""/>
							<outline text="console.log (&quot;setupXrefs: theText == &quot; + theText + &quot;, xref == &quot; + xref + &quot;, fname == &quot; + fname + &quot;, folder == &quot; + folder + &quot;, url == &quot; + url);" isComment="true"/>
							<outline text="console.log (&quot;setupXrefs: url == &quot; + url);"/>
							<outline text=""/>
							<outline text="initWedge (theListItem, function (flExpand) {">
								<outline text="if (flExpand) {">
									<outline text="function exposeOutlineObject () {">
										<outline text="$(outlineObject).slideDown (75, undefined, function () {">
											<outline text="$(outlineObject).css (&quot;display&quot;, &quot;block&quot;);"/>
											<outline text=""/>
											<outline text="});"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="if (outlineObject === undefined) {">
										<outline text="readHttpFile (url, function (jsontext) {">
											<outline text="if (jsontext !== undefined) {">
												<outline text="var jstruct = JSON.parse (jsontext), permalinkString = &quot;&quot;, htmltext;"/>
												<outline text=""/>
												<outline text="if (jstruct.created !== undefined) {">
													<outline text="permalinkString = &quot;&lt;div class=\&quot;divXrefPermalink\&quot;&gt;&lt;a href=\&quot;&quot; + xref + &quot;\&quot;&gt;&quot; + formatDate (jstruct.created, &quot;%b %e, %Y&quot;) + &quot;&lt;/a&gt;&lt;/div&gt;&quot;;"/>
													<outline text="}"/>
													</outline>
												<outline text=""/>
												<outline text="if (jstruct.subs !== undefined) {">
													<outline text="htmltext = renderOutlineBrowser (jstruct, false, undefined, undefined, true);"/>
													<outline text="}"/>
													</outline>
												<outline text="else {">
													<outline text="htmltext = jstruct.text;"/>
													<outline text="}"/>
													</outline>
												<outline text=""/>
												<outline text="htmltext = &quot;&lt;div class=\&quot;divXrefOutline\&quot;&gt;&quot; + permalinkString + htmltext + &quot;&lt;/div&gt;&quot;;"/>
												<outline text=""/>
												<outline text="outlineObject = $(htmltext);"/>
												<outline text=""/>
												<outline text="console.log (htmltext);" isComment="true"/>
												<outline text="$(theListItem).append (outlineObject);"/>
												<outline text=""/>
												<outline text="exposeOutlineObject ();"/>
												<outline text=""/>
												<outline text="}"/>
												</outline>
											<outline text="});"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="exposeOutlineObject ();"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="$(outlineObject).slideUp (75);"/>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function setupSpoilers () {">
					<outline text="$(&quot;.spSpoiler&quot;).each (function () {">
						<outline text="var spoilertext = $(this).html ();"/>
						<outline text="console.log (&quot;setupSpoilers: spoilertext == &quot; + spoilertext);"/>
						<outline text="console.log (&quot;setupSpoilers&quot;);"/>
						<outline text="$(this).text (&quot;[Spoilers.]&quot;);"/>
						<outline text="$(this).css (&quot;display&quot;, &quot;inline&quot;);"/>
						<outline text="$(this).mousedown (function () {">
							<outline text="console.log (&quot;setupSpoilers: spoilertext == &quot; + spoilertext);"/>
							<outline text="$(this).text (spoilertext);"/>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function setupTagrefs () { //7/17/21 by DW">
					<outline text="tagrefDialogStartup ();" created="Wed, 21 Jul 2021 16:57:11 GMT"/>
					<outline text="$(&quot;.spTagref&quot;).each (function () {" isComment="true">
						<outline text="var theTag = $(this).text ();"/>
						<outline text="console.log (&quot;setupTagrefs: theTag == &quot; + theTag);"/>
						<outline text="$(this).click (function () {">
							<outline text="var url = &quot;http://tags.scripting.com/gettagrefsjson?tag=&quot; + urlEncode (theTag);"/>
							<outline text="console.log (&quot;setupTagrefs, click: theTag == &quot; + theTag);" isComment="true"/>
							<outline text="readHttpFile (url, function (jsontext) {">
								<outline text="var htmltext = &quot;&quot;;" created="Sat, 17 Jul 2021 16:38:20 GMT"/>
								<outline text="function add (s) {" created="Sat, 17 Jul 2021 16:38:28 GMT">
									<outline text="htmltext += s + &quot;\n&quot;;" created="Sat, 17 Jul 2021 16:38:31 GMT"/>
									<outline text="}" created="Sat, 17 Jul 2021 16:38:42 GMT"/>
									</outline>
								<outline text="if (jsontext === undefined) {" created="Sat, 17 Jul 2021 16:36:49 GMT">
									<outline text="add (&quot;There was a problem getting information from the tags server.&quot;);" created="Sat, 17 Jul 2021 16:37:06 GMT"/>
									<outline text="}" created="Sat, 17 Jul 2021 16:36:56 GMT"/>
									</outline>
								<outline text="else {" created="Sat, 17 Jul 2021 16:37:41 GMT">
									<outline text="try {" created="Sat, 17 Jul 2021 16:37:47 GMT">
										<outline text="var theOutline = JSON.parse (jsontext);" created="Sat, 17 Jul 2021 16:37:56 GMT"/>
										<outline text="var nomad = theOutline.opml.body;" created="Sat, 17 Jul 2021 16:42:52 GMT"/>
										<outline text="if ((nomad.subs === undefined) || (nomad.subs.length == 0)) {" created="Sat, 17 Jul 2021 16:43:11 GMT">
											<outline text="add (&quot;There are no posts tagged with \&quot;&quot; + theTag + &quot;.\&quot;&quot;);" created="Sat, 17 Jul 2021 16:43:48 GMT"/>
											<outline text="}" created="Sat, 17 Jul 2021 16:43:24 GMT"/>
											</outline>
										<outline text="else {" created="Sat, 17 Jul 2021 16:43:25 GMT">
											<outline text="add (&quot;There are &quot; + nomad.subs.length + &quot; post(s) tagged with \&quot;&quot; + theTag + &quot;.\&quot;&quot;);" created="Sat, 17 Jul 2021 16:43:48 GMT"/>
											<outline text="}" created="Sat, 17 Jul 2021 16:43:27 GMT"/>
											</outline>
										<outline text="}" created="Sat, 17 Jul 2021 16:37:48 GMT"/>
										</outline>
									<outline text="catch (err) {" created="Sat, 17 Jul 2021 16:37:49 GMT">
										<outline text="add (&quot;There was a problem getting information from the tags server.&quot;);" created="Sat, 17 Jul 2021 16:37:06 GMT"/>
										<outline text="}" created="Sat, 17 Jul 2021 16:37:53 GMT"/>
										</outline>
									<outline text="}" created="Sat, 17 Jul 2021 16:37:43 GMT"/>
									</outline>
								<outline text="console.log (&quot;setupTagrefs: htmltext == &quot; + htmltext);"/>
								<outline text="});"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function viewInPopup (obj) {" isComment="true">
					<outline text="console.log (&quot;viewInPopup: &quot; + obj);" isComment="true"/>
					<outline text="var htmltext = &quot;&quot;, indentlevel = 0;"/>
					<outline text="function add (s) {">
						<outline text="htmltext +=  filledString (&quot;\t&quot;, indentlevel) + s + &quot;\n&quot;;"/>
						<outline text="}"/>
						</outline>
					<outline text="add (&quot;&lt;div class=\&quot;divPopupWindow\&quot;&gt;&quot;); indentlevel++;"/>
					<outline text="add (&quot;&lt;div id=\&quot;idPopupWindow\&quot; class=\&quot;modal hide fade\&quot; tabindex=\&quot;-1\&quot; role=\&quot;dialog\&quot; aria-labelledby=\&quot;attPopupWindow\&quot; aria-hidden=\&quot;true\&quot;&gt;&quot;); indentlevel++;"/>
					<outline text="add (&quot;&lt;div class=\&quot;modal-body\&quot;&gt;&quot;); indentlevel++;"/>
					<outline text="add (&quot;&lt;a href=\&quot;#\&quot; class=\&quot;close\&quot; data-dismiss=\&quot;modal\&quot;&gt;&amp;times;&lt;/a&gt;&quot;)"/>
					<outline text="add (&quot;&lt;div id=\&quot;idStoryHtml\&quot;&gt;&lt;/div&gt;&quot;);"/>
					<outline text="add (&quot;&lt;/div&gt;&quot;); indentlevel--;"/>
					<outline text="add (&quot;&lt;/div&gt;&quot;); indentlevel--;"/>
					<outline text="add (&quot;&lt;/div&gt;&quot;); indentlevel--;"/>
					<outline text=""/>
					<outline text="console.log (htmltext);" isComment="true"/>
					<outline text="" isComment="true"/>
					<outline text="$(&quot;body&quot;).prepend (htmltext);" isComment="true"/>
					<outline text="" isComment="true"/>
					<outline text="$(&quot;#idStoryHtml&quot;).append (obj);" isComment="true"/>
					<outline text="}"/>
					</outline>
				<outline text="function viewRiverPage () {">
					<outline text="var urlRiver = &quot;http://radio3.io/rivers/iowa.js&quot;; "/>
					<outline text="var title = $(&quot;#idRiverDisplay&quot;).data (&quot;title&quot;);"/>
					<outline text="httpGetRiver (urlRiver, &quot;idRiverDisplay&quot;, function () {">
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function viewLinksPage (callback) {">
					<outline text="var urlRiver = &quot;http://radio3.io/rivers/iowa.js&quot;; "/>
					<outline text="var title = $(&quot;#idRiverDisplay&quot;).data (&quot;title&quot;);"/>
					<outline text="readHttpFile (&quot;http://radio3.io/users/davewiner/linkblog.json&quot;, function (jsontext) {">
						<outline text="var daysTable = JSON.parse (jsontext);"/>
						<outline text="$(&quot;#idLinkblogDays&quot;).html (&quot;&quot;);"/>
						<outline text="for (var i = 0; i &lt; daysTable.length; i++) { //10/8/16 by DW">
							<outline text="appendDay (daysTable [i].jstruct);"/>
							<outline text="}"/>
							</outline>
						<outline text="if (callback != undefined) {">
							<outline text="callback ();"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function viewLastUpdateString () { ">
					<outline text="Changes" isComment="true">
						<outline text="2/25/18; 1:19:19 PM by DW">
							<outline text="The Updated message on the home page gets too long sometimes. For example, &quot;Yesterday at 12:48PM&quot; is too long. So we hack it up and just change it to Yesterday. Now it isn't too long. Will there be other too-long cases? Maybe. Watch out for them. ;-)"/>
							</outline>
						</outline>
					<outline text="if (config.flHomePage) {">
						<outline text="var whenstring = getFacebookTimeString (config.now, true); //2/25/18 by DW"/>
						<outline text="if (beginsWith (whenstring, &quot;Yesterday&quot;)) {">
							<outline text="whenstring = &quot;Yesterday&quot;;"/>
							<outline text="}"/>
							</outline>
						<outline text="$(&quot;#idLastBlogUpdate&quot;).html (&quot;Updated: &quot; + whenstring + &quot;.&quot;);"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function viewFooterLastUpdateString () { //10/28/21 by DW" created="Thu, 28 Oct 2021 13:07:47 GMT">
					<outline text="var theString = formatDate (new Date (config.now), &quot;%A, %B %e, %Y at %l:%M %p&quot;);" created="Thu, 28 Oct 2021 13:08:50 GMT"/>
					<outline text="$(&quot;#idLastUpdateStringInFooter&quot;).text (theString);" created="Thu, 28 Oct 2021 13:08:00 GMT"/>
					<outline text="}" created="Thu, 28 Oct 2021 13:08:01 GMT"/>
					</outline>
				<outline text="function updateSnarkySlogan () { //1/23/19 by DW">
					<outline text="$(&quot;#idSnarkySlogan&quot;).html (getRandomSnarkySlogan ());"/>
					<outline text="}"/>
					</outline>
				<outline text="function everyMinute () {">
					<outline text="viewLastUpdateString ();"/>
					<outline text="updateSnarkySlogan (); //1/23/19 by DW"/>
					<outline text="}"/>
					</outline>
				<outline text="function everySecond () {">
					<outline text="$(&quot;.spHowLongUntilBidenStarts&quot;).each (function () { //1/18/21 by DW">
						<outline text="function howLongUntilBidenStarts () {" isComment="true">
							<outline text="var whenInaugration = new Date (&quot;Wed Jan 20 2021 11:59:59 GMT-0500 (Eastern Standard Time)&quot;);"/>
							<outline text="var now = new Date ();"/>
							<outline text="function howLongUntil (now, whenStart) { ">
								<outline text="Changes" isComment="true">
									<outline text="8/10/19; 4:05:14 PM by DW">
										<outline text="Returns an object with properties: years, months, days, hours, minutes, seconds."/>
										</outline>
									</outline>
								<outline text="function daysInYear (year) {">
									<outline text="var flLeapYear = ((year % 400) == 0) || ((year % 100) != 0 &amp;&amp; ((year % 4) == 0));"/>
									<outline text="return ((flLeapYear) ? 366 : 365);"/>
									<outline text="}"/>
									</outline>
								<outline text="function daysInMonth (month, year) { ">
									<outline text="return (new Date (year, month, 0).getDate ()); "/>
									<outline text="} "/>
									</outline>
								<outline text="function getnum (num, units) {">
									<outline text="if (num != 1) {">
										<outline text="units += &quot;s&quot;;"/>
										<outline text="}"/>
										</outline>
									<outline text="return (num + &quot; &quot; + units);"/>
									<outline text="}"/>
									</outline>
								<outline text="const ctSecsInDay = 60 * 60 * 24;"/>
								<outline text="const ctMilliSecsInDay = 1000 * ctSecsInDay;"/>
								<outline text="const now = new Date ();" isComment="true"/>
								<outline text="var theYear = whenStart.getFullYear ();"/>
								<outline text="var ctDays = (now - whenStart) / ctMilliSecsInDay;"/>
								<outline text="var ctYears = 0;"/>
								<outline text="while (true) {">
									<outline text="if (ctDays &lt;= daysInYear (theYear)) {">
										<outline text="break;"/>
										<outline text="}"/>
										</outline>
									<outline text="ctDays -= daysInYear (theYear);"/>
									<outline text="ctYears++;"/>
									<outline text="theYear++;"/>
									<outline text="}"/>
									</outline>
								<outline text=""/>
								<outline text="var theMonth = 0, ctMonths = 0;"/>
								<outline text="while (true) {">
									<outline text=""/>
									<outline text="if (ctDays &lt; daysInMonth (theMonth, theYear)) {">
										<outline text="break;"/>
										<outline text="}"/>
										</outline>
									<outline text="ctDays -= daysInMonth (theMonth, theYear);"/>
									<outline text="ctMonths++;"/>
									<outline text="theMonth++;"/>
									<outline text="}"/>
									</outline>
								<outline text=""/>
								<outline text="const ctWholeDays = Math.floor (ctDays);"/>
								<outline text="var ctRemainingSecs = (ctDays - ctWholeDays) * ctSecsInDay;"/>
								<outline text="var ctHours = Math.floor (ctRemainingSecs / (60 * 60));"/>
								<outline text="ctRemainingSecs -= ctHours * 60 * 60;"/>
								<outline text="var ctMinutes = Math.floor (ctRemainingSecs / 60);"/>
								<outline text="ctRemainingSecs -= ctMinutes * 60;"/>
								<outline text="ctRemainingSecs = Math.floor (ctRemainingSecs);"/>
								<outline text="return ({">
									<outline text="years: ctYears,"/>
									<outline text="months: ctMonths,"/>
									<outline text="days: ctWholeDays,"/>
									<outline text="hours: ctHours,"/>
									<outline text="minutes: ctMinutes,"/>
									<outline text="seconds: ctRemainingSecs"/>
									<outline text="});"/>
									</outline>
								<outline text="return (getnum (ctYears, &quot;year&quot;) + &quot;, &quot; + getnum (ctMonths, &quot;month&quot;) + &quot;, &quot; + getnum (ctWholeDays, &quot;day&quot;) + &quot;, &quot; + getnum (ctHours, &quot;hour&quot;) + &quot;, &quot; + getnum (ctMinutes, &quot;minute&quot;) + &quot;, &quot; + getnum (ctRemainingSecs, &quot;second&quot;) + &quot;.&quot;);" isComment="true"/>
								<outline text="}"/>
								</outline>
							<outline text=""/>
							<outline text="var howlong = howLongUntil (whenInaugration, now);"/>
							<outline text=""/>
							<outline text="var s = &quot;&quot;;"/>
							<outline text="function addnum (num, label) {">
								<outline text="if (num &gt; 0) {">
									<outline text="if (num == 1) {">
										<outline text="label = stringDelete (label, label.length, 1);"/>
										<outline text="}"/>
										</outline>
									<outline text="s += num + &quot; &quot; + label + &quot;, &quot;;"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="addnum (howlong.days, &quot;days&quot;);"/>
							<outline text="addnum (howlong.minutes, &quot;minutes&quot;);"/>
							<outline text="addnum (howlong.seconds, &quot;seconds&quot;);"/>
							<outline text="if (endsWith (s, &quot;, &quot;)) {">
								<outline text="s = stringDelete (s, s.length - 1, 2);"/>
								<outline text="}"/>
								</outline>
							<outline text="$(&quot;#idHowLong&quot;).html (s);" isComment="true"/>
							<outline text="return (s);"/>
							<outline text="}"/>
							</outline>
						<outline text="function getTrumpTimeRemaining () {">
							<outline text="var whenInaugration = new Date (&quot;Wed Jan 20 2021 11:59:59 GMT-0500 (Eastern Standard Time)&quot;);"/>
							<outline text="var now = new Date ();"/>
							<outline text="var ctsecs = (whenInaugration - now) / 1000;"/>
							<outline text=""/>
							<outline text="const ctsecsinday = 60 * 60 * 24;"/>
							<outline text="const ctsecsinhour = 60 * 60;"/>
							<outline text="var ctdays = Math.floor (ctsecs / ctsecsinday);"/>
							<outline text="ctsecs -= ctdays * ctsecsinday;"/>
							<outline text=""/>
							<outline text="var cthours = Math.floor (ctsecs / ctsecsinhour);"/>
							<outline text="ctsecs -= cthours * ctsecsinhour;"/>
							<outline text=""/>
							<outline text="var ctminutes = Math.floor (ctsecs / 60);"/>
							<outline text="ctsecs -= ctminutes * 60;"/>
							<outline text="ctsecs = Math.floor (ctsecs);"/>
							<outline text=""/>
							<outline text="var s = &quot;&quot;;"/>
							<outline text="function addnum (num, label, fllast) {">
								<outline text="if (num &gt; 0) {">
									<outline text="if (num == 1) {">
										<outline text="label = stringDelete (label, label.length, 1);"/>
										<outline text="}"/>
										</outline>
									<outline text="s += num + &quot; &quot; + label;"/>
									<outline text="if (!fllast) {">
										<outline text="s += &quot;, &quot;;"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="addnum (ctdays, &quot;days&quot;);"/>
							<outline text="addnum (cthours, &quot;hours&quot;);"/>
							<outline text="addnum (ctminutes, &quot;minutes&quot;);"/>
							<outline text="addnum (ctsecs, &quot;seconds&quot;, true);"/>
							<outline text="return (s);"/>
							<outline text="}"/>
							</outline>
						<outline text="$(this).text (getTrumpTimeRemaining ());"/>
						<outline text="});"/>
						</outline>
					<outline text="$(&quot;.spRandomMotto&quot;).each (function () { //8/7/19 by DW">
						<outline text="$(this).text (getRandomSnarkySlogan ());"/>
						<outline text="});"/>
						</outline>
					<outline text="$(&quot;.spHowLongRunning&quot;).each (function () { //8/9/19 by DW">
						<outline text="$(this).text (&quot;This blog has been running for: &quot; + howLongSinceStartAsString (new Date (&quot;10/7/1994, 12:00 PDT&quot;)));"/>
						<outline text="});"/>
						</outline>
					<outline text="setHowMuchTrumpTimeRemaining (); //1/20/21 by DW" isComment="true"/>
					<outline text="}"/>
					</outline>
				<outline text="function setupJavaScriptFeatures () { //1/15/19 by DW">
					<outline text="setupXrefs (); //7/13/17 by DW"/>
					<outline text="setupTweets (); //7/24/17 by DW"/>
					<outline text="setupExpandableImages (); //7/24/17 by DW"/>
					<outline text="setupExpandableVideo (); //10/9/17 by DW"/>
					<outline text="setupExpandableDisqusThreads (); //7/25/17 by DW" isComment="true"/>
					<outline text="setupExpandableOutline (); //5/15/18 by DW"/>
					<outline text="setupTwitterComments (); //12/14/18 by DW"/>
					<outline text="setupSpoilers (); //3/3/20 by DW"/>
					<outline text="setupTagrefs (); //7/17/21 by DW" created="Sat, 17 Jul 2021 16:11:45 GMT"/>
					<outline text="setupGists (); //12/20/21 by DW" created="Mon, 20 Dec 2021 22:18:25 GMT"/>
					<outline text="setupMastodonToots (); //4/9/23 by DW"/>
					<outline text="try { //9/21/19 by DW">
						<outline text="if (modalImageViewStartup !== undefined) { //6/25/18 by DW">
							<outline text="modalImageViewStartup (); "/>
							<outline text="if (config.flHomePage) {" isComment="true">
								<outline text="modalImageViewStartup (&quot;.divArchivePageDay&quot;); "/>
								<outline text="}"/>
								</outline>
							<outline text="else {" isComment="true">
								<outline text="modalImageViewStartup (); "/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="catch (err) {">
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function setPageTopImageFromMetadata () { //5/4/20 by DW">
					<outline text="if (config.metadata !== undefined) {">
						<outline text="if (config.metadata.image !== undefined) {">
							<outline text="$(&quot;#idPagetopImage&quot;).css (&quot;background-image&quot;, &quot;url(&quot; + config.metadata.image + &quot;)&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function movePageDownForOldArchivePages () { //9/21/19 by DW">
					<outline text="Changes" isComment="true">
						<outline text="9/21/19; 11:59:19 AM by DW">
							<outline text=""/>
							</outline>
						</outline>
					<outline text="var fladjust = !dayGreaterThanOrEqual (opmlHead.dateModified, &quot;21 Apr 2019&quot;)"/>
					<outline text="if (fladjust) {">
						<outline text="$(&quot;.divPageBody&quot;).css (&quot;margin-top&quot;, &quot;270px&quot;)"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="" created="Sun, 14 Apr 2024 15:21:34 GMT"/>
				<outline text="const appConsts = { //4/14/24 by DW" isComment="true" created="Tue, 14 Nov 2023 19:30:57 GMT">
					<outline text="flBlogrollEnabled: true, //3/13/24 by DW" created="Wed, 13 Mar 2024 16:20:11 GMT"/>
					<outline text="urlFeedlandServer: &quot;https://feedland.social/&quot;, //2/28/24 by DW" created="Tue, 14 Nov 2023 19:31:07 GMT"/>
					<outline text="urlFeedlandServer: &quot;https://feedland.com/&quot;," isComment="true" created="Tue, 14 Nov 2023 19:31:07 GMT"/>
					<outline text="urlSocketServer: &quot;wss://feedland.social/&quot;," created="Wed, 28 Feb 2024 15:16:52 GMT"/>
					<outline text="urlFeedListOpml: &quot;https://feedland.social/opml?screenname=davewiner&amp;catname=blogroll&quot;," created="Sat, 17 Feb 2024 17:03:57 GMT"/>
					<outline text="urlFeedListOpml: &quot;http://scripting.com/code/blogroll/starterfeeds.opml&quot;," isComment="true" created="Sat, 17 Feb 2024 17:03:57 GMT"/>
					<outline text="urlFeedlandViewBlogroll: &quot;https://feedland.social/?username=davewiner&amp;catname=blogroll&quot; //3/13/24 by DW" created="Wed, 13 Mar 2024 13:52:54 GMT"/>
					<outline text="}" created="Tue, 14 Nov 2023 19:31:06 GMT"/>
					</outline>
				<outline text="" created="Sun, 14 Apr 2024 15:26:52 GMT"/>
				<outline text="function getBlogrollOptions (headLevelAtts) {" created="Mon, 15 Apr 2024 12:58:22 GMT">
					<outline text="Changes" isComment="true" created="Mon, 15 Apr 2024 12:58:36 GMT">
						<outline text="4/15/24; 8:58:41 AM by DW" created="Mon, 15 Apr 2024 12:58:40 GMT">
							<outline text="The author of the blog can enable a blogroll via three head-level attributes." created="Mon, 15 Apr 2024 12:58:42 GMT"/>
							<outline text="We're looking for these --" created="Mon, 15 Apr 2024 12:59:09 GMT">
								<outline text="blogrollUsername -- required"/>
								<outline text="blogrollServer -- optional"/>
								<outline text="blogrollCategory -- optional"/>
								</outline>
							<outline text="Defaults" created="Mon, 15 Apr 2024 13:02:37 GMT">
								<outline text="If blogrollServer is not specified, we use feedland.com" created="Mon, 15 Apr 2024 13:00:12 GMT"/>
								<outline text="If blogrollCategory is not specified, we don't specify one in the URLs we generate" created="Mon, 15 Apr 2024 13:00:12 GMT"/>
								</outline>
							<outline text="We translate those values to the ones the blogroll software needs --" created="Mon, 15 Apr 2024 13:00:41 GMT">
								<outline text="urlSocketServer"/>
								<outline text="urlFeedlandViewBlogroll"/>
								<outline text="urlBlogrollOpml"/>
								</outline>
							<outline text="We return undefined if no blogroll is called for, otherwise it has the three values we transmit to the blogroll software. " created="Mon, 15 Apr 2024 13:01:03 GMT"/>
							</outline>
						</outline>
					<outline text="" created="Mon, 15 Apr 2024 13:01:58 GMT"/>
					<outline text="const urlFeedlandCom = &quot;https://feedland.com/&quot;;" created="Mon, 15 Apr 2024 13:11:33 GMT"/>
					<outline text="const wsUrlFeedlandCom = &quot;wss://feedland.com:443/_ws/&quot;;" created="Mon, 15 Apr 2024 13:11:58 GMT"/>
					<outline text="" created="Mon, 15 Apr 2024 13:11:42 GMT"/>
					<outline text="var username = headLevelAtts.blogrollUsername;" created="Mon, 15 Apr 2024 13:07:01 GMT"/>
					<outline text="var urlServer = headLevelAtts.blogrollServer;" created="Mon, 15 Apr 2024 13:07:22 GMT"/>
					<outline text="var catname = headLevelAtts.blogrollCategory;" created="Mon, 15 Apr 2024 13:07:56 GMT"/>
					<outline text="" created="Mon, 15 Apr 2024 13:17:40 GMT"/>
					<outline text="var urlSocketServer, urlFeedlandViewBlogroll;" created="Mon, 15 Apr 2024 13:17:41 GMT"/>
					<outline text="" created="Mon, 15 Apr 2024 13:07:01 GMT"/>
					<outline text="if (username === undefined) { //username is required" created="Mon, 15 Apr 2024 13:01:59 GMT">
						<outline text="return (undefined);" created="Mon, 15 Apr 2024 13:03:17 GMT"/>
						<outline text="}" created="Mon, 15 Apr 2024 13:03:15 GMT"/>
						</outline>
					<outline text="else {" created="Mon, 15 Apr 2024 13:40:36 GMT">
						<outline text="username = trimWhitespace (username);" created="Mon, 15 Apr 2024 13:25:27 GMT"/>
						<outline text="if (username.length == 0) {" created="Mon, 15 Apr 2024 13:41:13 GMT">
							<outline text="return (undefined);" created="Mon, 15 Apr 2024 13:03:17 GMT"/>
							<outline text="}" created="Mon, 15 Apr 2024 13:41:22 GMT"/>
							</outline>
						<outline text="else {" created="Mon, 15 Apr 2024 13:41:23 GMT">
							<outline text="if (urlServer === undefined) {" created="Mon, 15 Apr 2024 13:23:18 GMT">
								<outline text="urlServer = urlFeedlandCom;" created="Mon, 15 Apr 2024 13:23:31 GMT"/>
								<outline text="}" created="Mon, 15 Apr 2024 13:23:28 GMT"/>
								</outline>
							<outline text="urlServer = trimWhitespace (urlServer);" created="Mon, 15 Apr 2024 13:25:27 GMT"/>
							<outline text="if (!endsWith (urlServer, &quot;/&quot;)) {" created="Mon, 15 Apr 2024 13:24:08 GMT">
								<outline text="urlServer += &quot;/&quot;;" created="Mon, 15 Apr 2024 13:24:23 GMT"/>
								<outline text="}" created="Mon, 15 Apr 2024 13:24:30 GMT"/>
								</outline>
							<outline text="if (catname !== undefined) {" created="Mon, 15 Apr 2024 13:09:01 GMT">
								<outline text="catname = trimWhitespace (catname);" created="Mon, 15 Apr 2024 13:10:08 GMT"/>
								<outline text="if (catname.length == 0) {" created="Mon, 15 Apr 2024 13:10:14 GMT">
									<outline text="catname = undefined;" created="Mon, 15 Apr 2024 13:10:22 GMT"/>
									<outline text="}" created="Mon, 15 Apr 2024 13:10:26 GMT"/>
									</outline>
								<outline text="}" created="Mon, 15 Apr 2024 13:10:27 GMT"/>
								</outline>
							<outline text="" created="Mon, 15 Apr 2024 13:10:47 GMT"/>
							<outline text="//set urlSocketServer" created="Mon, 15 Apr 2024 13:17:54 GMT">
								<outline text="if (urlServer == urlFeedlandCom) {" created="Mon, 15 Apr 2024 13:10:47 GMT">
									<outline text="urlSocketServer = &quot;wss://feedland.com:443/_ws/&quot;;" created="Mon, 15 Apr 2024 13:14:47 GMT"/>
									<outline text="}" created="Mon, 15 Apr 2024 13:12:58 GMT"/>
									</outline>
								<outline text="else {" created="Mon, 15 Apr 2024 13:15:30 GMT">
									<outline text="urlSocketServer = replaceAll (urlServer, &quot;https://&quot;, &quot;wss://&quot;);" created="Mon, 15 Apr 2024 13:15:32 GMT"/>
									<outline text="}" created="Mon, 15 Apr 2024 13:15:39 GMT"/>
									</outline>
								</outline>
							<outline text="//set urlFeedlandViewBlogroll" created="Mon, 15 Apr 2024 13:18:37 GMT">
								<outline text="urlFeedlandViewBlogroll = urlServer + &quot;?username=&quot; + urlEncode (username);" created="Mon, 15 Apr 2024 13:18:46 GMT"/>
								<outline text="if (catname !== undefined) {" created="Mon, 15 Apr 2024 13:20:20 GMT">
									<outline text="urlFeedlandViewBlogroll +=  &quot;&amp;catname=&quot; + urlEncode (catname);" created="Mon, 15 Apr 2024 13:20:28 GMT"/>
									<outline text="}" created="Mon, 15 Apr 2024 13:20:26 GMT"/>
									</outline>
								</outline>
							<outline text="//set urlBlogrollOpml" created="Mon, 15 Apr 2024 13:21:24 GMT">
								<outline text="urlBlogrollOpml = urlServer + &quot;opml?screenname=&quot; + urlEncode (username);" created="Mon, 15 Apr 2024 13:18:46 GMT"/>
								<outline text="if (catname !== undefined) {" created="Mon, 15 Apr 2024 13:20:20 GMT">
									<outline text="urlBlogrollOpml +=  &quot;&amp;catname=&quot; + urlEncode (catname);" created="Mon, 15 Apr 2024 13:20:28 GMT"/>
									<outline text="}" created="Mon, 15 Apr 2024 13:20:26 GMT"/>
									</outline>
								</outline>
							<outline text="" created="Fri, 19 Apr 2024 15:57:33 GMT"/>
							<outline text="//set urlFeedlandServer -- 4/19/24 by DW" created="Fri, 19 Apr 2024 15:57:34 GMT">
								<outline text="urlFeedlandServer = urlServer;" created="Fri, 19 Apr 2024 15:57:34 GMT"/>
								</outline>
							<outline text="" created="Mon, 15 Apr 2024 13:41:55 GMT"/>
							<outline text="return ({urlFeedlandServer, urlSocketServer, urlFeedlandViewBlogroll, urlBlogrollOpml});" created="Mon, 15 Apr 2024 13:26:15 GMT"/>
							<outline text="}" created="Mon, 15 Apr 2024 13:41:25 GMT"/>
							</outline>
						<outline text="}" created="Mon, 15 Apr 2024 13:40:38 GMT"/>
						</outline>
					<outline text="}" created="Mon, 15 Apr 2024 12:58:36 GMT"/>
					</outline>
				<outline text="" created="Mon, 15 Apr 2024 13:35:04 GMT"/>
				<outline text="function startBlogroll (callback) { //4/14/24 by DW" created="Thu, 29 Feb 2024 14:32:41 GMT">
					<outline text="console.log (&quot;startBlogroll&quot;);" created="Wed, 28 Feb 2024 15:25:06 GMT"/>
					<outline text="var options = getBlogrollOptions (opmlHead); " created="Mon, 15 Apr 2024 13:28:57 GMT"/>
					<outline text="if (options !== undefined) { //a blogroll is called for" created="Mon, 15 Apr 2024 13:28:57 GMT">
						<outline text="options.whereToAppend = $(&quot;.divBlogrollContainer&quot;);" created="Fri, 15 Mar 2024 17:05:17 GMT"/>
						<outline text="options.title = (opmlHead.blogrollTitle === undefined) ? &quot;Just A Blogroll&quot; : opmlHead.blogrollTitle;" created="Mon, 15 Apr 2024 13:30:32 GMT"/>
						<outline text="options.flDisplayTitle = true;" created="Mon, 15 Apr 2024 13:29:52 GMT"/>
						<outline text="options.blogrollDisplayedCallback = function () {" created="Sat, 17 Feb 2024 17:42:15 GMT">
							<outline text="console.log (&quot;blogrollDisplayedCallback&quot;);" created="Sat, 17 Feb 2024 17:00:28 GMT"/>
							<outline text="if (callback !== undefined) {">
								<outline text="callback ();" created="Wed, 06 Mar 2024 20:49:54 GMT"/>
								<outline text="}" created="Wed, 06 Mar 2024 20:49:57 GMT"/>
								</outline>
							<outline text="}" created="Sat, 17 Feb 2024 17:42:20 GMT"/>
							</outline>
						<outline text="try { //2/28/24 by DW" created="Wed, 28 Feb 2024 15:24:09 GMT">
							<outline text="const theBlogroll = new blogroll (options);" created="Tue, 06 Feb 2024 16:01:27 GMT"/>
							<outline text="if (callback !== undefined) {">
								<outline text="callback ();" created="Wed, 06 Mar 2024 20:49:54 GMT"/>
								<outline text="}" created="Wed, 06 Mar 2024 20:49:57 GMT"/>
								</outline>
							<outline text="}" created="Wed, 28 Feb 2024 15:24:13 GMT"/>
							</outline>
						<outline text="catch (err) {" created="Wed, 28 Feb 2024 15:24:14 GMT">
							<outline text="console.log (&quot;startBlogroll: err.message == &quot; + err.message);" created="Wed, 28 Feb 2024 15:25:06 GMT"/>
							<outline text="if (callback !== undefined) {">
								<outline text="callback (err);" created="Wed, 06 Mar 2024 20:49:54 GMT"/>
								<outline text="}" created="Wed, 06 Mar 2024 20:49:57 GMT"/>
								</outline>
							<outline text="}" created="Wed, 28 Feb 2024 15:24:17 GMT"/>
							</outline>
						<outline text="}" created="Mon, 15 Apr 2024 13:29:31 GMT"/>
						</outline>
					<outline text="else {" created="Mon, 15 Apr 2024 14:05:31 GMT">
						<outline text="$(&quot;.divSidebar&quot;).css (&quot;display&quot;, &quot;none&quot;);" created="Mon, 15 Apr 2024 14:06:12 GMT"/>
						<outline text="}" created="Mon, 15 Apr 2024 14:05:33 GMT"/>
						</outline>
					<outline text="" isComment="true" created="Mon, 15 Apr 2024 13:28:57 GMT"/>
					<outline text="if ((opmlHead.blogrollUrlOpml !== undefined) &amp;&amp; (appConsts.flBlogrollEnabled)) {" isComment="true" created="Sun, 14 Apr 2024 15:35:43 GMT">
						<outline text="if ($(&quot;.divSidebar&quot;).css (&quot;display&quot;) != &quot;none&quot;) {" created="Wed, 06 Mar 2024 15:59:49 GMT">
							<outline text="const blogrollOptions = {" created="Thu, 29 Feb 2024 14:33:44 GMT">
								<outline text="urlFeedListOpml: opmlHead.blogrollUrlOpml," created="Thu, 29 Feb 2024 14:34:01 GMT"/>
								<outline text="urlFeedListOpml: appConsts.urlFeedListOpml," isComment="true" created="Thu, 29 Feb 2024 14:34:01 GMT"/>
								<outline text="urlFeedlandViewBlogroll: appConsts.urlFeedlandViewBlogroll," created="Wed, 13 Mar 2024 20:12:24 GMT"/>
								<outline text="whereToAppend: $(&quot;.divBlogrollContainer&quot;), //3/15/24 by DW" created="Fri, 15 Mar 2024 17:05:17 GMT"/>
								<outline text="title: (opmlHead.blogrollTitle === undefined) ? &quot;Just A Blogroll&quot; : opmlHead.blogrollTitle," created="Thu, 29 Feb 2024 14:35:15 GMT"/>
								<outline text="title: &quot;Dave's Blogroll&quot;," isComment="true" created="Thu, 29 Feb 2024 14:35:15 GMT"/>
								<outline text="flDisplayTitle: true," created="Sat, 17 Feb 2024 20:53:49 GMT"/>
								<outline text="blogrollDisplayedCallback: function () {" created="Sat, 17 Feb 2024 17:42:15 GMT">
									<outline text="console.log (&quot;blogrollDisplayedCallback&quot;);" created="Sat, 17 Feb 2024 17:00:28 GMT"/>
									<outline text="if (callback !== undefined) {">
										<outline text="callback ();" created="Wed, 06 Mar 2024 20:49:54 GMT"/>
										<outline text="}" created="Wed, 06 Mar 2024 20:49:57 GMT"/>
										</outline>
									<outline text="}" created="Sat, 17 Feb 2024 17:42:20 GMT"/>
									</outline>
								<outline text="};" created="Thu, 29 Feb 2024 14:33:50 GMT"/>
								</outline>
							<outline text="try { //2/28/24 by DW" created="Wed, 28 Feb 2024 15:24:09 GMT">
								<outline text="const theBlogroll = new blogroll (blogrollOptions);" created="Tue, 06 Feb 2024 16:01:27 GMT"/>
								<outline text="}" created="Wed, 28 Feb 2024 15:24:13 GMT"/>
								</outline>
							<outline text="catch (err) {" created="Wed, 28 Feb 2024 15:24:14 GMT">
								<outline text="console.log (&quot;startBlogroll: err.message == &quot; + err.message);" created="Wed, 28 Feb 2024 15:25:06 GMT"/>
								<outline text="return;" created="Thu, 29 Feb 2024 14:33:38 GMT"/>
								<outline text="}" created="Wed, 28 Feb 2024 15:24:17 GMT"/>
								</outline>
							<outline text="}" created="Wed, 06 Mar 2024 16:00:11 GMT"/>
							</outline>
						<outline text="else {" created="Thu, 07 Mar 2024 14:29:25 GMT">
							<outline text="if (callback !== undefined) {">
								<outline text="callback ();" created="Wed, 06 Mar 2024 20:49:54 GMT"/>
								<outline text="}" created="Wed, 06 Mar 2024 20:49:57 GMT"/>
								</outline>
							<outline text="}" created="Thu, 07 Mar 2024 14:29:28 GMT"/>
							</outline>
						<outline text="}" created="Sun, 14 Apr 2024 16:32:32 GMT"/>
						</outline>
					<outline text="else {" isComment="true" created="Sun, 14 Apr 2024 20:09:05 GMT">
						<outline text="$(&quot;.divSidebar&quot;).css (&quot;display&quot;, &quot;none&quot;);" created="Sun, 14 Apr 2024 20:09:18 GMT"/>
						<outline text="}" created="Sun, 14 Apr 2024 20:09:06 GMT"/>
						</outline>
					<outline text="}" created="Thu, 29 Feb 2024 14:32:50 GMT"/>
					</outline>
				<outline text="" created="Thu, 28 Oct 2021 13:07:47 GMT"/>
				<outline text="function startup () {">
					<outline text="console.log (&quot;startup&quot;);"/>
					<outline text="$(&quot;#idVersionNumber&quot;).text (myVersion);"/>
					<outline text="updateTwitterButton (); //4/23/19 by DW"/>
					<outline text="movePageDownForOldArchivePages (); //9/21/19 by DW" isComment="true"/>
					<outline text="twStorageData.urlTwitterServer = urlTwitterServer; //7/24/17 AM by DW -- for displaying embedded tweets" isComment="true"/>
					<outline text="twStorageData.urlTwitterServer = urlLikeServer;"/>
					<outline text="console.log (&quot;startup: twStorageData.urlTwitterServer == &quot; + twStorageData.urlTwitterServer);" isComment="true"/>
					<outline text="twGetOauthParams (); //11/10/18 by DW"/>
					<outline text="if (localStorage.savedState !== undefined) {" isComment="true">
						<outline text="savedState = JSON.parse (localStorage.savedState);"/>
						<outline text="savedState.currentTab = &quot;blog&quot;; //4/6/20 AM by DW"/>
						<outline text="}"/>
						</outline>
					<outline text="//get tab param, if present, redirect to appropriate page" isComment="true">
						<outline text="var theParam = getURLParameter (&quot;tab&quot;);"/>
						<outline text="if (theParam == &quot;null&quot;) {">
							<outline text="theParam = getURLParameter (&quot;panel&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="if (theParam != &quot;null&quot;) {">
							<outline text="var newloc = undefined;"/>
							<outline text="switch (theParam) {">
								<outline text="case &quot;about&quot;:">
									<outline text="newloc = &quot;about.html&quot;" isComment="true"/>
									<outline text="savedState.currentTab =&quot;about&quot;; //9/11/17 by DW" isComment="true"/>
									<outline text="break;"/>
									</outline>
								<outline text="case &quot;river&quot;:">
									<outline text="newloc = &quot;river.html&quot;"/>
									<outline text="break;"/>
									</outline>
								<outline text="case &quot;links&quot;:">
									<outline text="newloc = &quot;links.html&quot;" isComment="true"/>
									<outline text="savedState.currentTab =&quot;linkblog&quot;; //9/11/17 by DW" isComment="true"/>
									<outline text="break;"/>
									</outline>
								<outline text="case &quot;blog&quot;: //9/11/17 by DW">
									<outline text="savedState.currentTab =&quot;blog&quot;; //9/11/17 by DW" isComment="true"/>
									<outline text="break;"/>
									</outline>
								<outline text="case &quot;discuss&quot;:">
									<outline text="savedState.currentTab =&quot;discuss&quot;;" isComment="true"/>
									<outline text="break;"/>
									</outline>
								<outline text="case &quot;chat&quot;: //4/29/19 by DW">
									<outline text="savedState.currentTab =&quot;chat&quot;;" isComment="true"/>
									<outline text="break;"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="if (newloc !== undefined) {">
								<outline text="window.location.href = config.baseUrl + newloc;"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						</outline>
					<outline text="//get tag param, if present popup the tag display in front of the blog -- 7/26/21 by DW" isComment="true" created="Mon, 26 Jul 2021 19:03:05 GMT">
						<outline text="var tagParam = getURLParameter (&quot;tag&quot;);"/>
						<outline text="if (tagParam != &quot;null&quot;) {">
							<outline text="openTagrefDialogExternally (tagParam);" created="Mon, 26 Jul 2021 19:04:07 GMT"/>
							<outline text="}"/>
							</outline>
						</outline>
					<outline text="" created="Wed, 01 Sep 2021 16:00:28 GMT"/>
					<outline text="//get tab param, if present, redirect to appropriate page">
						<outline text="var tabParam = getURLParameter (&quot;tab&quot;);"/>
						<outline text="tabParam = (tabParam == &quot;null&quot;) ? undefined : tabParam;" created="Wed, 01 Sep 2021 20:01:18 GMT"/>
						</outline>
					<outline text="" created="Wed, 01 Sep 2021 20:00:02 GMT"/>
					<outline text="startTabsIfHomePage (tabParam, function () {">
						<outline text="viewLastUpdateString (); //9/28/17 by DW"/>
						<outline text="viewFooterLastUpdateString (); //10/28/21 by DW" created="Thu, 28 Oct 2021 13:15:27 GMT"/>
						<outline text="updateSnarkySlogan (); //1/23/19 by DW"/>
						<outline text="setupJavaScriptFeatures ();"/>
						<outline text="setPageTopImageFromMetadata (); //5/4/20 by DW"/>
						<outline text="hitCounter (&quot;drummer&quot;); "/>
						<outline text="if (config.flGoogleAnalytics) {">
							<outline text="initGoogleAnalytics (config.appDomain, config.idGoogleAccount); "/>
							<outline text="}"/>
							</outline>
						<outline text="self.setInterval (everySecond, 1000); "/>
						<outline text="runEveryMinute (everyMinute);"/>
						<outline text="infiniteScrollHandler (); //10/17/19 by DW"/>
						<outline text="if (config.flHomePage) { //4/14/24 by DW" created="Mon, 15 Apr 2024 20:49:43 GMT">
							<outline text="startBlogroll (); " created="Sun, 14 Apr 2024 15:23:50 GMT"/>
							<outline text="}" created="Mon, 15 Apr 2024 20:49:45 GMT"/>
							</outline>
						<outline text="else {" created="Mon, 15 Apr 2024 20:50:41 GMT">
							<outline text="$(&quot;.divSidebar&quot;).css (&quot;display&quot;, &quot;none&quot;);" created="Mon, 15 Apr 2024 14:06:12 GMT"/>
							<outline text="}" created="Mon, 15 Apr 2024 20:50:43 GMT"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="" created="Wed, 01 Sep 2021 16:00:31 GMT"/>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="templates/minimal/styles.css">
				<outline text="@import url('https://fonts.googleapis.com/css?family=Oswald:400,700');"/>
				<outline text=""/>
				<outline text="body { ">
					<outline text="font-family: &quot;Ubuntu&quot;;"/>
					<outline text="font-size: 18px;"/>
					<outline text="background-color: whitesmoke;"/>
					<outline text="text-rendering: optimizeLegibility;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divPagetop {">
					<outline text="width: 100%;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divPagetopImage {">
					<outline text="position: absolute;"/>
					<outline text="top: 0;"/>
					<outline text="left: 0;"/>
					<outline text="height: 230px;"/>
					<outline text="width: 100%;"/>
					<outline text="margin-left: 0;"/>
					<outline text="margin-top: 0;"/>
					<outline text="border-top: 1px solid silver;" isComment="true"/>
					<outline text="z-index: -1;"/>
					<outline text="-webkit-background-size: cover;"/>
					<outline text="-moz-background-size: cover;"/>
					<outline text="-o-background-size: cover;"/>
					<outline text="background-size: cover;"/>
					<outline text="background-position: center;"/>
					<outline text="background-repeat: no-repeat;"/>
					<outline text="background-color: black;"/>
					<outline text="z-index: 0;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divPagetopTextBackground {">
					<outline text="position: absolute;"/>
					<outline text="top: 30;"/>
					<outline text="left: 15%;"/>
					<outline text="width: 70%;"/>
					<outline text="height: 140px;"/>
					<outline text="z-index: 1;"/>
					<outline text="background-color: black;"/>
					<outline text="opacity: 0.25;"/>
					<outline text="border-top: 1px solid white;"/>
					<outline text="display: none;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divPagetopText {">
					<outline text="position: absolute;"/>
					<outline text="text-align: center;"/>
					<outline text="top: 60;"/>
					<outline text="left: 15%;"/>
					<outline text="width: 65%;"/>
					<outline text="height: 200px;"/>
					<outline text="color: white;"/>
					<outline text="padding-top: 3px;"/>
					<outline text="padding-left: 20px;"/>
					<outline text="z-index: 2;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divPagetopTitle {">
					<outline text="font-family: &quot;Oswald&quot;;"/>
					<outline text="font-size: 80px;"/>
					<outline text="font-weight: 700;"/>
					<outline text="font-style: normal;"/>
					<outline text="letter-spacing: -0.01em;"/>
					<outline text="line-height: 1.1;"/>
					<outline text="margin-bottom: 0;"/>
					<outline text="color: white;"/>
					<outline text="text-shadow: 1px 1px black;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divPagetopTitle a {">
					<outline text="color: white;"/>
					<outline text="cursor: pointer;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divPagetopTitle a:hover {">
					<outline text="text-decoration: none;"/>
					<outline text="color: lemonchiffon;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divPagetopDescription {">
					<outline text="font-family: &quot;Oswald&quot;;" isComment="true"/>
					<outline text="font-size: 20px;"/>
					<outline text="margin-top: 5px;"/>
					<outline text="text-shadow: 1px 1px black;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divPageBody { ">
					<outline text="width: 680px;"/>
					<outline text="width: 630px;" isComment="true"/>
					<outline text="margin-top: 240px;"/>
					<outline text="margin-left: auto;"/>
					<outline text="margin-right: auto;"/>
					<outline text="margin-bottom: 400px;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divDayContainer {">
					<outline text="background-color: white;"/>
					<outline text="padding: 50px;"/>
					<outline text="padding-top: 30px;"/>
					<outline text="padding-bottom: 30px;"/>
					<outline text="border: 1px solid silver;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divDayTitle {">
					<outline text="font-family: &quot;Oswald&quot;;"/>
					<outline text="font-size: 32px;"/>
					<outline text="font-weight: bold;"/>
					<outline text="margin-bottom: 30px;"/>
					<outline text="letter-spacing: -1px;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divDayTitle a {">
					<outline text="color: black;"/>
					<outline text="opacity: .85;"/>
					<outline text="cursor: pointer;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divSingularItem {">
					<outline text="color: green;" isComment="true"/>
					<outline text="line-height: 150%;"/>
					<outline text="margin-bottom: .6em;"/>
					<outline text="font-family: &quot;Georgia&quot;;" isComment="true"/>
					<outline text="font-size: 20px;" isComment="true"/>
					<outline text="}"/>
					</outline>
				<outline text=".divTitledItem {">
					<outline text="color: blue;" isComment="true"/>
					<outline text="}"/>
					</outline>
				<outline text=".divTitledItem .divTitle {">
					<outline text="font-family: &quot;Oswald&quot;;"/>
					<outline text="font-size: 25px;"/>
					<outline text="color: black;" isComment="true"/>
					<outline text="margin-top: 20px;"/>
					<outline text="margin-bottom: .1em;"/>
					<outline text="font-weight: bold;"/>
					<outline text="line-height: 140%;"/>
					<outline text="letter-spacing: -1px;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divTitledItem .ulLevel0 {">
					<outline text="margin-left: 0;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divTitledItem li {">
					<outline text="list-style-type: none;"/>
					<outline text="margin-bottom: .6em;"/>
					<outline text="line-height: 150%;"/>
					<outline text="font-family: &quot;Georgia&quot;;" isComment="true"/>
					<outline text="font-size: 20px;" isComment="true"/>
					<outline text="}"/>
					</outline>
				<outline text=".spLink {">
					<outline text="margin-left: .5em;"/>
					<outline text="}"/>
					</outline>
				<outline text=".spLink a {">
					<outline text="color: gray;"/>
					<outline text="cursor: pointer;"/>
					<outline text="}"/>
					</outline>
				<outline text=".spPermaLink {">
					<outline text="margin-left: .4em;"/>
					<outline text="display: none;" isComment="true"/>
					<outline text="}"/>
					</outline>
				<outline text=".spPermaLink a {">
					<outline text="font-family: &quot;Ubuntu&quot;;"/>
					<outline text="color: purple;"/>
					<outline text="opacity: 0.3;"/>
					<outline text="opacity: 0.5;" isComment="true"/>
					<outline text="opacity: 0.2;" isComment="true"/>
					<outline text="font-weight: normal;"/>
					<outline text="font-size: .8em;" isComment="true"/>
					<outline text="font-size: 14px;"/>
					<outline text="cursor: pointer;"/>
					<outline text="}"/>
					</outline>
				<outline text=".spPermaLink a:hover {">
					<outline text="opacity: 0.9;"/>
					<outline text="color: green;" created="Thu, 04 Mar 2021 14:34:49 GMT"/>
					<outline text="}"/>
					</outline>
				<outline text=".divArchivePageDay {">
					<outline text="margin-bottom: 40px;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divArchivePageDay .divDayTitle {" isComment="true">
					<outline text="font-size: 1.5em;" isComment="true"/>
					<outline text="margin-bottom: 30px;" isComment="true"/>
					<outline text="color: green;" isComment="true"/>
					<outline text="}"/>
					</outline>
				<outline text=".divFooter {" created="Fri, 07 Mar 2014 17:07:49 GMT" pgfnum="38596">
					<outline text="font-family: &quot;Ubuntu&quot;, sans-serif;" isComment="true"/>
					<outline text="margin-top: 400px;"/>
					<outline text="font-size: .80em;"/>
					<outline text="line-height: 180%;" created="Sun, 09 Mar 2014 22:42:38 GMT" pgfnum="38763"/>
					<outline text="border-top: 1px solid silver;" created="Fri, 07 Mar 2014 17:08:19 GMT" pgfnum="38600"/>
					<outline text="text-align: center;" created="Fri, 07 Mar 2014 17:10:00 GMT" pgfnum="38601"/>
					<outline text="padding-top: 15px;" created="Fri, 07 Mar 2014 17:12:24 GMT" pgfnum="38602"/>
					<outline text="height: 400px;" isComment="true" created="Fri, 07 Mar 2014 17:08:00 GMT" pgfnum="38598"/>
					<outline text="}" created="Fri, 07 Mar 2014 17:07:51 GMT" pgfnum="38597"/>
					</outline>
				<outline text=".divSocialMediaLinks {">
					<outline text="letter-spacing: 12px; "/>
					<outline text="font-size: 1.2em; " isComment="true"/>
					<outline text="margin-top: 5px;"/>
					<outline text="}"/>
					</outline>
				<outline text=".spTitleLink {">
					<outline text="color: black;"/>
					<outline text="opacity: .85;"/>
					<outline text="cursor: pointer;"/>
					<outline text="}"/>
					</outline>
				<outline text=".ulNumberedSubs li {">
					<outline text="list-style-type: decimal;"/>
					<outline text="}"/>
					</outline>
				<outline text="" created="Wed, 01 Sep 2021 17:29:58 GMT"/>
				<outline text="/* tabs*/">
					<outline text=".divTabs .nav-tabs {">
						<outline text="margin-bottom: -1px;"/>
						<outline text="border-bottom: 1px solid #ddd;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divTabs .tab-content {">
						<outline text="border: 1px solid #ddd;"/>
						<outline text="background-color: white;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divTabs .tab-pane {">
						<outline text="padding: 8px;"/>
						<outline text="padding-top: 15px;"/>
						<outline text="line-height: 140%;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divTabs li {">
						<outline text="width: 120px;"/>
						<outline text="color: gray;"/>
						<outline text="}"/>
						</outline>
					<outline text=""/>
					<outline text=".divPageBody {" isComment="true">
						<outline text="margin-top: 260px;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divTabContentContainer {">
						<outline text="min-height: 600px;"/>
						<outline text="background-color: white;"/>
						<outline text="border: 1px solid rgb(221, 221, 221);"/>
						<outline text="}"/>
						</outline>
					<outline text=".divTabContent {">
						<outline text="margin-top: 30px;"/>
						<outline text="margin-left: 40px;"/>
						<outline text="margin-right: 40px;"/>
						<outline text="margin-bottom: 30px;"/>
						<outline text="}"/>
						</outline>
					<outline text=".iTabIcon {">
						<outline text="margin-right: .4em;"/>
						<outline text="opacity: .8;"/>
						<outline text="}"/>
						</outline>
					<outline text=".active {">
						<outline text="background-color: white;" isComment="true"/>
						<outline text="color: black;"/>
						<outline text="font-weight: bold;"/>
						<outline text="}"/>
						</outline>
					<outline text=".nav-tabs {">
						<outline text="font-family: &quot;Oswald&quot;;" isComment="true"/>
						<outline text="margin-bottom: -1px;"/>
						<outline text="font-size: 18px;"/>
						<outline text="}"/>
						</outline>
					<outline text=".nav-tabs &gt; li &gt; a {">
						<outline text="cursor: pointer;"/>
						<outline text="color: inherit;"/>
						<outline text="}"/>
						</outline>
					<outline text=".nav-tabs &gt; .active &gt; a, .nav-tabs &gt; .active &gt; a:hover, .nav-tabs &gt; .active &gt; a:focus {">
						<outline text="background-color: white;"/>
						<outline text="border: 1px solid silver;"/>
						<outline text="border-bottom-color: transparent;"/>
						<outline text="}"/>
						</outline>
					<outline text=".nav-tabs &gt; li &gt; a, .nav-pills &gt; li &gt; a {">
						<outline text="padding-left: 8px;"/>
						<outline text="padding-right: 8px;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divAboutOutline, .divAboutOutline .divOutlineText {">
						<outline text="font-size: 18px;"/>
						<outline text="line-height: 130%;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divOutlineHead {">
						<outline text="font-family: &quot;Oswald&quot;;"/>
						<outline text="font-size: 32px;"/>
						<outline text="letter-spacing: -1px;"/>
						<outline text="line-height: 100%;"/>
						<outline text="vertical-align: text-top;"/>
						<outline text="margin-top: -4px;"/>
						<outline text="margin-left: -5px;"/>
						<outline text="margin-bottom: .4em;"/>
						<outline text="}"/>
						</outline>
					<outline text=".snap-content {">
						<outline text="background-color: whitesmoke;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divLeftDrawerContent .divOutlineHead {">
						<outline text="font-family: &quot;Ubuntu&quot;;"/>
						<outline text="font-size: 20px;"/>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text=""/>
				<outline text="/* 5/27/17 by DW -- snap.js */">
					<outline text=".divSnapIcon {">
						<outline text="position: fixed;"/>
						<outline text="top: 0;"/>
						<outline text="left: 0;"/>
						<outline text="z-index: 20;"/>
						<outline text="width: 98%;" isComment="true"/>
						<outline text="}"/>
						</outline>
					<outline text=".divVersionNumber {">
						<outline text="position: absolute; "/>
						<outline text="top: 5;"/>
						<outline text="left: 95%;"/>
						<outline text="font-size: 12px;"/>
						<outline text="color: black;"/>
						<outline text="background-color: white;"/>
						<outline text="padding-left: 5px;"/>
						<outline text="padding-right: 5px;"/>
						<outline text="z-index: 20;"/>
						<outline text="line-height: 1em;" isComment="true"/>
						<outline text="border: 1px solid gray;"/>
						<outline text="opacity: 0.5;"/>
						<outline text="cursor: pointer;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divVersionNumber:hover {">
						<outline text="opacity: 1;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divSnapIcon a {">
						<outline text="display: block;"/>
						<outline text="width: 44px;"/>
						<outline text="height: 44px;"/>
						<outline text="cursor: pointer;" created="Fri, 20 Dec 2013 00:10:13 GMT" pgfnum="33992"/>
						<outline text="background-color: black;" isComment="true" created="Tue, 24 Dec 2013 19:10:53 GMT" pgfnum="34394"/>
						<outline text="opacity: 0.15;" isComment="true"/>
						<outline text="float: left;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divSnapIcon i {">
						<outline text="font-size: 22px;"/>
						<outline text="color: white;" isComment="true"/>
						<outline text="margin-left: 11px;"/>
						<outline text="margin-top: 10px;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divSnapIcon a {" isComment="true">
						<outline text="background: url(http://fargo.io/cms/snap/open.png) center center no-repeat;"/>
						<outline text="display: block;"/>
						<outline text="width: 44px;"/>
						<outline text="height: 44px;"/>
						<outline text="cursor: pointer;" created="Fri, 20 Dec 2013 00:10:13 GMT" pgfnum="33992"/>
						<outline text="background-color: black;" created="Tue, 24 Dec 2013 19:10:53 GMT" pgfnum="34394"/>
						<outline text="opacity: 0.15;" isComment="true"/>
						<outline text="float: left;"/>
						<outline text="}"/>
						</outline>
					<outline text=".snap-content {">
						<outline text="background-color: white;"/>
						<outline text="}"/>
						</outline>
					<outline text=".snap-drawers {">
						<outline text="background: gainsboro;"/>
						<outline text="width: 300px;"/>
						<outline text="}"/>
						</outline>
					<outline text=".snap-drawer {">
						<outline text="background: gainsboro;"/>
						<outline text="color: #eee;"/>
						<outline text="width: 300px;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divLeftDrawerContent {">
						<outline text="margin-top: 30px;" isComment="true"/>
						<outline text="width: 80%;"/>
						<outline text="margin-left: 10%;"/>
						<outline text="color: black;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divLeftDrawer h4 {">
						<outline text="color: black;"/>
						<outline text="font-size: 18px;"/>
						<outline text="font-weight: bold;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divLeftDrawer p {">
						<outline text="margin-bottom: 20px;"/>
						<outline text="font-size: 18px;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divLeftDrawer .divOutlineText {">
						<outline text="font-size: 14px;"/>
						<outline text="line-height: 100%;" isComment="true"/>
						<outline text="margin-bottom: 5px;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divLeftDrawer .divOutlineText a {">
						<outline text="color: black;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divOutlineDisplayer {">
						<outline text="margin-top: 60px;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divLeftDrawer .divRenderedOutline .divOutlineHead .aOutlineTextLink {">
						<outline text="color: black;"/>
						<outline text="}"/>
						</outline>
					<outline text=""/>
					<outline text=".aSnapClosed {">
						<outline text="background-color: black;" created="Tue, 24 Dec 2013 19:10:53 GMT" pgfnum="34394"/>
						<outline text="}"/>
						</outline>
					<outline text=".aSnapClosed i {">
						<outline text="color: white;"/>
						<outline text="}"/>
						</outline>
					<outline text=".aSnapOpen {">
						<outline text="background-color: inherit;" created="Tue, 24 Dec 2013 19:10:53 GMT" pgfnum="34394"/>
						<outline text="border: 1px solid white;" isComment="true"/>
						<outline text="}"/>
						</outline>
					<outline text=".aSnapOpen i {">
						<outline text="color: black;"/>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="/* 5/27/17 by DW -- about outline */">
					<outline text=".divAboutOutline {">
						<outline text="}"/>
						</outline>
					<outline text=".divAboutOutline ul {">
						<outline text="margin-left: 15px;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divAboutOutline .divOutlineText {">
						<outline text="font-size: 17px;"/>
						<outline text="line-height: 160%;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divAboutOutline .divOutlineHead .aOutlineTextLink {">
						<outline text="color: black;"/>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="/* 7/13/17 by DW -- xrefs */">
					<outline text=".spScriptingNewsWedge {">
						<outline text="font-size: 1.1em;"/>
						<outline text="float: left;"/>
						<outline text="margin-left: -.7em;"/>
						<outline text="margin-top: .3em;"/>
						<outline text="cursor: pointer;"/>
						<outline text="}"/>
						</outline>
					<outline text=".spScriptingNewsWedge i {">
						<outline text="color: black;"/>
						<outline text="opacity: .3;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divXrefOutline {">
						<outline text="font-size: 16px;"/>
						<outline text="margin-top: 10px;"/>
						<outline text="padding-left: 25px;"/>
						<outline text="padding-right: 25px;"/>
						<outline text="padding-top: 15px;"/>
						<outline text="padding-bottom: 10px;"/>
						<outline text="margin-bottom: 10px;"/>
						<outline text="background-color: white;"/>
						<outline text="border: 1px solid silver;"/>
						<outline text="display: none;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divXrefOutline .divRenderedOutline .divOutlineHead .aOutlineTextLink {">
						<outline text="color: black;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divXrefPermalink {">
						<outline text="float: right;"/>
						<outline text="font-size: 14px;"/>
						<outline text="margin-top: -2px;"/>
						<outline text="}"/>
						</outline>
					<outline text=".darkCaretColor {">
						<outline text="color: black;"/>
						<outline text="}"/>
						</outline>
					<outline text=".lightCaretColor {">
						<outline text="color: black;"/>
						<outline text="opacity: .3;"/>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="/* 7/24/17 by DW -- tweets */">
					<outline text=".divEmbeddedTweet {">
						<outline text="visibility: hidden;"/>
						<outline text="}"/>
						</outline>
					<outline text=".imgExpandable {">
						<outline text="display: block;"/>
						<outline text="visibility: hidden;"/>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="/* 7/25/17 by DW -- make emoji a little bigger */">
					<outline text=".spOldSchoolEmoji {">
						<outline text="font-size: 1.1em;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divDisqusThread {">
						<outline text="border: 1px solid silver;"/>
						<outline text="background-color: white;"/>
						<outline text="min-height: 200px"/>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="/* 8/2/17 by DW */">
					<outline text=".divXrefOutline {">
						<outline text="line-height: 140%;"/>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="/* 9/28/17 by DW*/">
					<outline text=".divLastBlogUpdate {">
						<outline text="float: right;"/>
						<outline text="font-size: 14px;"/>
						<outline text="color: rgb(128, 128, 128);"/>
						<outline text="padding-top: 12px;"/>
						<outline text="padding-right: 2px;"/>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="/* 12/19/17 by DW -- discuss tab */">
					<outline text=".divDiscussIntro {">
						<outline text="font-size: 14px;"/>
						<outline text="line-height: 140%;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divComments {">
						<outline text="border: 1px solid silver;"/>
						<outline text="padding: 8px;"/>
						<outline text="background-color: whitesmoke;"/>
						<outline text="margin-top: 30px;"/>
						<outline text="margin-bottom: 50px;"/>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="/* 12/31/17 by DW -- story pages */">
					<outline text=".divStoryPageTitle {">
						<outline text="font-family: &quot;Oswald&quot;;"/>
						<outline text="font-size: 32px;"/>
						<outline text="font-weight: bold;"/>
						<outline text="line-height: 100%;"/>
						<outline text="margin-bottom: 20px;"/>
						<outline text="letter-spacing: -1px;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divStoryPageTitle a {">
						<outline text="color: black;"/>
						<outline text="opacity: .85;"/>
						<outline text="cursor: pointer;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divStoryPageTitle .spPermalink {">
						<outline text="display: none;"/>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="/* 2/6/18 by DW */">
					<outline text=".divStoryPageTitle {">
						<outline text="font-size: 48px;"/>
						<outline text="letter-spacing: -3px;"/>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="/* 2/11/18 by DW */">
					<outline text=".divStoryPagePostTime {">
						<outline text="font-size: 18px;"/>
						<outline text="margin-bottom: 15px;"/>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="/* 5/15/18 by DW -- collapse attribute, flBulletedList attribute */">
					<outline text=".ulCollapsed {">
						<outline text="display: none;"/>
						<outline text="}"/>
						</outline>
					<outline text=".ulBulletedSubs li {">
						<outline text="list-style-type: square;"/>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="/*  5/19/18 by DW */">
					<outline text=".divTextSizeControl {">
						<outline text="float: right;"/>
						<outline text="padding: 5px;"/>
						<outline text="border: 1px solid silver;" isComment="true"/>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="/*  7/13/18 by DW -- tweak display of xrefs */">
					<outline text=".divXrefOutline .divRenderedOutline .divOutlineHead {">
						<outline text="font-size: 18px;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divXrefOutline .divRenderedOutline .divOutlineHead .aOutlineTextLink {">
						<outline text="margin-left: 7px;"/>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="/*  11/8/18 by DW -- likes */">
					<outline text=".spLikes {">
						<outline text="font-size: 18px;"/>
						<outline text="cursor: pointer;"/>
						<outline text="color: silver;"/>
						<outline text="margin-left: 10px;" isComment="true"/>
						<outline text="}"/>
						</outline>
					<outline text=".spLikes:hover {">
						<outline text="color: gray;"/>
						<outline text="}"/>
						</outline>
					<outline text=".spLikes a {">
						<outline text="color: inherit;"/>
						<outline text="}"/>
						</outline>
					<outline text=".spLikes a:hover {" isComment="true">
						<outline text="font-weight: bold;"/>
						<outline text="color: black;"/>
						<outline text="text-decoration: none;"/>
						<outline text="}"/>
						</outline>
					<outline text=".spThumb a {">
						<outline text="color: lightslategray;"/>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="/*  11/23/18 by DW -- likes */">
					<outline text=".spPermaLink {">
						<outline text="margin-left: 5px;"/>
						<outline text="margin-right: 8px;"/>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="/*  12/14/18 by DW -- twitter comments */">
					<outline text=".spTwitterComment {">
						<outline text="margin-left: 0px;"/>
						<outline text="margin-right: 8px;"/>
						<outline text="}"/>
						</outline>
					<outline text=".spTwitterComment a {">
						<outline text="color: silver;"/>
						<outline text="}"/>
						</outline>
					<outline text=".spTwitterComment a:hover {">
						<outline text="color: gray;"/>
						<outline text="color: #4099FF;" isComment="true"/>
						<outline text="}"/>
						</outline>
					<outline text=".divTweetDialogContainer {">
						<outline text="padding-top: 15px;"/>
						<outline text="padding-bottom: 15px;"/>
						<outline text="padding-left: 25px;"/>
						<outline text="padding-right: 25px;"/>
						<outline text="font-size: 18px;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divTweetEditorContainer .divTweetPrompt {">
						<outline text="color: black;"/>
						<outline text="font-weight: normal;"/>
						<outline text="font-size: 16px;"/>
						<outline text="margin-bottom: 3px;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divTweetEditor {">
						<outline text="width: 97%;"/>
						<outline text="padding: 7px;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divTweetEditorPostButton {">
						<outline text="margin-top: 7px;"/>
						<outline text="}"/>
						</outline>
					<outline text=".medium-editor-placeholder {">
						<outline text="position: relative; }"/>
						</outline>
					<outline text=".medium-editor-placeholder:after {">
						<outline text="left: 10;"/>
						<outline text="top: 10;"/>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="/*  4/22/19 by DW -- connect item, chat */">
					<outline text=".divToggleConnect {">
						<outline text="position: absolute;"/>
						<outline text="top: 5;"/>
						<outline text="left: 5;"/>
						<outline text="min-width: 58;"/>
						<outline text="z-index: 20;"/>
						<outline text="background-color: white;"/>
						<outline text="border: 1px solid gray;"/>
						<outline text="font-size: 12px;"/>
						<outline text="padding-left: 5px;"/>
						<outline text="padding-right: 5px;"/>
						<outline text="cursor: pointer;"/>
						<outline text="opacity: 0.5;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divToggleConnect a {">
						<outline text="color: black;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divToggleConnect:hover {">
						<outline text="opacity: 1;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divChatMsgContainer {">
						<outline text="border: 1px solid gainsboro;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divChatBottomLine .spLikes {">
						<outline text="font-size: 14px;"/>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="/*  6/9/19 by DW -- move the body up by 20px */" isComment="true">
					<outline text=".divPageBody {">
						<outline text="margin-top: 240px;"/>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="/*  10/17/19 by DW -- More button and infinite scrolling */">
					<outline text=".divMoreButton {">
						<outline text="margin-top: 10px;"/>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="/*  12/17/19 by DW -- Make code look un-crappy, bootstrap makes it red? why. oh the humanity. */">
					<outline text="code {">
						<outline text="color: inherit;"/>
						<outline text="white-space: normal;"/>
						<outline text="font-size: 15px;" created="Wed, 24 Mar 2021 16:17:08 GMT"/>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="/*  1/3/20 by DW -- inlineImage styles. */">
					<outline text=".divInlineImage {">
						<outline text="padding: 10px;"/>
						<outline text="padding-left: 15px;"/>
						<outline text="padding-right: 15px;"/>
						<outline text="border: 1px dashed silver;"/>
						<outline text="font-size: 0.8em;"/>
						<outline text="line-height: 130%;"/>
						<outline text="text-align: center;"/>
						<outline text="}"/>
						</outline>
					<outline text=".imgInline, iframe {">
						<outline text="margin-bottom: 10px;"/>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="/*  3/3/20 PM by DW */">
					<outline text=".spSpoiler {">
						<outline text="display: none;"/>
						<outline text="cursor: pointer;"/>
						<outline text="color: green;"/>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="/*  4/24/20 PM by DW */">
					<outline text=".ulCodeSubs {">
						<outline text="font-family: &quot;Lucida Console&quot;, Monaco, &quot;Courier New&quot;, &quot;Courier&quot;, monospace;"/>
						<outline text="font-size: 14px !important;"/>
						<outline text="}"/>
						</outline>
					<outline text=".ulCodeSubs li {">
						<outline text="line-height: 110%;"/>
						<outline text="}"/>
						</outline>
					<outline text=".ulCodeSubs .spPermaLink {">
						<outline text="display: none;"/>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="/*  10/10/20 by DW -- biden/harris ad */">
					<outline text=".divBidenAd {">
						<outline text="display: none;"/>
						<outline text="position: fixed;"/>
						<outline text="top: 300;"/>
						<outline text="right: 100;"/>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="/*  1/20/21 by DW -- countdown to inauguration */" isComment="true">
					<outline text=".divInaugurationTitle {">
						<outline text="font-size: 24px;"/>
						<outline text="font-weight: bold;"/>
						<outline text="text-align: center;"/>
						<outline text="margin-bottom: 30px;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divInaugurationHowLong {">
						<outline text="font-family: &quot;Oswald&quot;;"/>
						<outline text="font-weight: 700;"/>
						<outline text="font-style: normal;"/>
						<outline text="letter-spacing: -0.02em;"/>
						<outline text="line-height: 1.1;"/>
						<outline text="margin-bottom: 0;"/>
						<outline text="color: white;" isComment="true"/>
						<outline text="text-shadow: 1px 1px black;" isComment="true"/>
						<outline text="font-size: 32px;"/>
						<outline text="line-height: 140%;" isComment="true"/>
						<outline text="}"/>
						</outline>
					<outline text=".divInaugurationTweetThis {">
						<outline text="margin-top: 40px;"/>
						<outline text="text-align: center;"/>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="/*  7/17/21 by DW -- tagrefs */" created="Sat, 17 Jul 2021 16:13:57 GMT">
					<outline text=".spTagref { " created="Sat, 17 Jul 2021 16:14:00 GMT">
						<outline text="cursor: pointer;" created="Sat, 17 Jul 2021 16:14:12 GMT"/>
						<outline text="color: orange;" isComment="true" created="Sat, 17 Jul 2021 16:14:15 GMT"/>
						<outline text="}" created="Sat, 17 Jul 2021 16:14:03 GMT"/>
						</outline>
					<outline text=".divTabContentContainer .spTagref, .divDayContainer .spTagref {" created="Wed, 21 Jul 2021 16:40:40 GMT">
						<outline text="color: #0088cc;" created="Wed, 21 Jul 2021 16:42:19 GMT"/>
						<outline text="}" created="Wed, 21 Jul 2021 16:40:43 GMT"/>
						</outline>
					<outline text=".divTabContentContainer .spTagref:hover, .divDayContainer .spTagref:hover {" created="Wed, 21 Jul 2021 16:40:40 GMT">
						<outline text="color: #0088cc;" isComment="true" created="Wed, 21 Jul 2021 16:42:19 GMT"/>
						<outline text="text-decoration: underline;"/>
						<outline text="}" created="Wed, 21 Jul 2021 16:40:43 GMT"/>
						</outline>
					<outline text=".divTabContentContainer .spTagref:before, .divDayContainer .spTagref:before {" created="Wed, 21 Jul 2021 16:40:40 GMT">
						<outline text="content: &quot;[&quot;;" created="Wed, 21 Jul 2021 16:42:19 GMT"/>
						<outline text="}" created="Wed, 21 Jul 2021 16:40:43 GMT"/>
						</outline>
					<outline text=".divTabContentContainer .spTagref:after, .divDayContainer .spTagref:after {" created="Wed, 21 Jul 2021 16:40:40 GMT">
						<outline text="content: &quot;]&quot;;" created="Wed, 21 Jul 2021 16:42:19 GMT"/>
						<outline text="}" created="Wed, 21 Jul 2021 16:40:43 GMT"/>
						</outline>
					<outline text=".divDayContainer .spTagref:hover {" isComment="true" created="Wed, 21 Jul 2021 16:40:40 GMT">
						<outline text="color: #0088cc;" created="Wed, 21 Jul 2021 16:42:19 GMT"/>
						<outline text="}" created="Wed, 21 Jul 2021 16:40:43 GMT"/>
						</outline>
					<outline text=".divDayContainer .spTagref:before {" isComment="true" created="Wed, 21 Jul 2021 16:40:40 GMT">
						<outline text="content: &quot;[&quot;;" created="Wed, 21 Jul 2021 16:42:19 GMT"/>
						<outline text="}" created="Wed, 21 Jul 2021 16:40:43 GMT"/>
						</outline>
					<outline text=".divDayContainer .spTagref:after {" isComment="true" created="Wed, 21 Jul 2021 16:40:40 GMT">
						<outline text="content: &quot;]&quot;;" created="Wed, 21 Jul 2021 16:42:19 GMT"/>
						<outline text="}" created="Wed, 21 Jul 2021 16:40:43 GMT"/>
						</outline>
					</outline>
				<outline text="/*  10/30/21 by DW -- markdown */" created="Sat, 30 Oct 2021 17:50:05 GMT">
					<outline text=".spMarkdownText ul, .spMarkdownText ol {" created="Sat, 30 Oct 2021 17:50:22 GMT">
						<outline text="margin-top: 7px;" created="Sat, 30 Oct 2021 17:51:25 GMT"/>
						<outline text="margin-bottom: 7px;" created="Sat, 30 Oct 2021 17:51:25 GMT"/>
						<outline text="}" created="Sat, 30 Oct 2021 17:50:48 GMT"/>
						</outline>
					<outline text=".spMarkdownText ol li {" created="Sat, 30 Oct 2021 17:50:22 GMT">
						<outline text="list-style-type: numeric;" created="Sat, 30 Oct 2021 17:51:25 GMT"/>
						<outline text="}" created="Sat, 30 Oct 2021 17:50:48 GMT"/>
						</outline>
					<outline text=".spMarkdownText ul li {" created="Sat, 30 Oct 2021 17:50:22 GMT">
						<outline text="list-style-type: disc;" created="Sat, 30 Oct 2021 17:51:25 GMT"/>
						<outline text="}" created="Sat, 30 Oct 2021 17:50:48 GMT"/>
						</outline>
					<outline text=".spMarkdownText p {" created="Sat, 30 Oct 2021 17:50:22 GMT">
						<outline text="margin-bottom: 0.6em;" created="Sun, 21 Nov 2021 15:08:38 GMT"/>
						<outline text="line-height: 150%;" created="Sun, 21 Nov 2021 15:08:44 GMT"/>
						<outline text="}" created="Sat, 30 Oct 2021 17:50:48 GMT"/>
						</outline>
					<outline text=".divMarkdownText ul, .divMarkdownText ol {" created="Sat, 30 Oct 2021 17:50:22 GMT">
						<outline text="margin-top: 7px;" created="Sat, 30 Oct 2021 17:51:25 GMT"/>
						<outline text="margin-bottom: 7px;" created="Sat, 30 Oct 2021 17:51:25 GMT"/>
						<outline text="}" created="Sat, 30 Oct 2021 17:50:48 GMT"/>
						</outline>
					<outline text=".divMarkdownText ol li {" created="Sat, 30 Oct 2021 17:50:22 GMT">
						<outline text="list-style-type: numeric;" created="Sat, 30 Oct 2021 17:51:25 GMT"/>
						<outline text="}" created="Sat, 30 Oct 2021 17:50:48 GMT"/>
						</outline>
					<outline text=".divMarkdownText ul li {" created="Sat, 30 Oct 2021 17:50:22 GMT">
						<outline text="list-style-type: disc;" created="Sat, 30 Oct 2021 17:51:25 GMT"/>
						<outline text="}" created="Sat, 30 Oct 2021 17:50:48 GMT"/>
						</outline>
					<outline text=".divMarkdownText p {" created="Sat, 30 Oct 2021 17:50:22 GMT">
						<outline text="margin-bottom: 0.6em;" created="Sun, 21 Nov 2021 15:08:38 GMT"/>
						<outline text="line-height: 150%;" created="Sun, 21 Nov 2021 15:08:44 GMT"/>
						<outline text="}" created="Sat, 30 Oct 2021 17:50:48 GMT"/>
						</outline>
					<outline text="" created="Sun, 21 Nov 2021 15:14:33 GMT"/>
					<outline text=".divMarkdownText {" created="Sun, 21 Nov 2021 15:43:22 GMT">
						<outline text="margin-top: 25px;" created="Sun, 21 Nov 2021 15:43:24 GMT"/>
						<outline text="}" created="Sun, 21 Nov 2021 15:43:30 GMT"/>
						</outline>
					<outline text=".divMarkdownText h6, .divMarkdownText h5, .divMarkdownText h4, .divMarkdownText h3, .divMarkdownText h2, .divMarkdownText h1 {" created="Sun, 21 Nov 2021 15:14:33 GMT">
						<outline text="margin-top: 15px;" created="Sun, 21 Nov 2021 15:14:43 GMT"/>
						<outline text="}" created="Sun, 21 Nov 2021 15:14:41 GMT"/>
						</outline>
					<outline text="" created="Sun, 21 Nov 2021 15:14:33 GMT"/>
					<outline text="" created="Sun, 21 Nov 2021 15:14:34 GMT"/>
					<outline text="" created="Sun, 21 Nov 2021 15:14:34 GMT"/>
					</outline>
				<outline text="/*  4/9/23 by DW */" created="Sun, 09 Apr 2023 15:47:22 GMT">
					<outline text=".divEmbeddedToot {" created="Sun, 09 Apr 2023 15:47:22 GMT">
						<outline text="visibility: hidden;"/>
						<outline text="}" created="Sun, 09 Apr 2023 15:47:26 GMT"/>
						</outline>
					</outline>
				<outline text="/* 4/14/24 by DW */" created="Sun, 14 Apr 2024 19:58:15 GMT">
					<outline text=".divPageBody {" created="Sun, 14 Apr 2024 20:07:27 GMT">
						<outline text="width: 880px;"/>
						<outline text="}" created="Sun, 14 Apr 2024 20:07:38 GMT"/>
						</outline>
					<outline text=".divTabsPage {" created="Sun, 14 Apr 2024 19:58:21 GMT">
						<outline text="display: table-cell;" created="Sun, 14 Apr 2024 19:59:01 GMT"/>
						<outline text="vertical-align: top;"/>
						<outline text="width: 680px;" created="Sun, 14 Apr 2024 20:06:21 GMT"/>
						<outline text="margin-left: auto;" created="Sun, 14 Apr 2024 20:10:28 GMT"/>
						<outline text="margin-right: auto;" created="Sun, 14 Apr 2024 20:10:32 GMT"/>
						<outline text="}" created="Sun, 14 Apr 2024 19:58:40 GMT"/>
						</outline>
					<outline text=".divSpacerCell {" created="Sun, 14 Apr 2024 19:58:47 GMT">
						<outline text="display: table-cell;" created="Sun, 14 Apr 2024 19:59:01 GMT"/>
						<outline text="width: 8px;" created="Sun, 14 Apr 2024 20:01:54 GMT"/>
						<outline text="}" created="Sun, 14 Apr 2024 19:58:49 GMT"/>
						</outline>
					<outline text=".divSidebar {" created="Sun, 14 Apr 2024 19:58:55 GMT">
						<outline text="display: table-cell;" created="Sun, 14 Apr 2024 19:59:01 GMT"/>
						<outline text="}" created="Sun, 14 Apr 2024 19:58:58 GMT"/>
						</outline>
					<outline text=".divBlogrollTitle { " created="Sun, 14 Apr 2024 20:13:50 GMT">
						<outline text="font-family: &quot;Impact&quot;, &quot;Ubuntu&quot;;" created="Sun, 14 Apr 2024 20:13:53 GMT"/>
						<outline text="font-size: 30px;" created="Sun, 14 Apr 2024 20:15:09 GMT"/>
						<outline text="opacity: 0.8;" isComment="true" created="Sun, 14 Apr 2024 20:15:51 GMT"/>
						<outline text="}" created="Sun, 14 Apr 2024 20:14:05 GMT"/>
						</outline>
					</outline>
				<outline text=""/>
				<outline text="/* styles for phone */" created="Sun, 09 Mar 2014 19:11:13 GMT" pgfnum="38719">
					<outline text="@media only screen "/>
					<outline text="and (min-device-width : 320px) "/>
					<outline text="and (max-device-width : 480px) {">
						<outline text="body {">
							<outline text="font-size: 16px;"/>
							<outline text="}"/>
							</outline>
						<outline text=".divPageBody {">
							<outline text="width: 90%;"/>
							<outline text="margin-left: auto;"/>
							<outline text="margin-right: auto;"/>
							<outline text="margin-top: 150px;"/>
							<outline text="}"/>
							</outline>
						<outline text=".divPagetopImage {">
							<outline text="height: 135px;"/>
							<outline text="}"/>
							</outline>
						<outline text=".divPagetopText {">
							<outline text="top: 20;"/>
							<outline text="width: 100%;"/>
							<outline text="left: 0;"/>
							<outline text="padding-left: 0;"/>
							<outline text="height: 100px;"/>
							<outline text="color: white;" isComment="true"/>
							<outline text="padding-top: 3px;" isComment="true"/>
							<outline text="z-index: 2;" isComment="true"/>
							<outline text="}"/>
							</outline>
						<outline text=".divPagetopTitle {">
							<outline text="font-size: 45px;"/>
							<outline text="}"/>
							</outline>
						<outline text=".divPagetopDescription {">
							<outline text="font-size: 16px;"/>
							<outline text="margin-top: 3px;"/>
							<outline text="}"/>
							</outline>
						<outline text=".divDayTitle {">
							<outline text="font-size: 22px;"/>
							<outline text="font-weight: normal;" isComment="true"/>
							<outline text="margin-bottom: 15px;"/>
							<outline text="}"/>
							</outline>
						<outline text=".divStoryPageTitle {">
							<outline text="font-size: 28px;"/>
							<outline text="letter-spacing: -1px;"/>
							<outline text="}"/>
							</outline>
						<outline text=".divStoryPagePostTime {">
							<outline text="font-size: 15px;"/>
							<outline text="}"/>
							</outline>
						<outline text=".divOutlineHead {">
							<outline text="font-size: 18px;"/>
							<outline text="margin-bottom: 15px;"/>
							<outline text="}"/>
							</outline>
						<outline text=".divAboutOutline .divOutlineText {">
							<outline text="font-size: 16px;"/>
							<outline text="margin-bottom: 7px;"/>
							<outline text="}"/>
							</outline>
						<outline text=".divAboutOutline ul {">
							<outline text="margin-left: 5px;"/>
							<outline text="}"/>
							</outline>
						<outline text=".divTabs li {">
							<outline text="width: 100px;"/>
							<outline text="}"/>
							</outline>
						<outline text=".divTitledItem .divTitle {">
							<outline text="font-size: 22px;"/>
							<outline text="margin-top: 15px;"/>
							<outline text="}"/>
							</outline>
						<outline text=".nav-tabs {">
							<outline text="font-size: 16px;"/>
							<outline text="}"/>
							</outline>
						<outline text=".nav-tabs &gt; li &gt; a, .nav-pills &gt; li &gt; a {">
							<outline text="padding-left: 2px;"/>
							<outline text="padding-right: 6px;"/>
							<outline text="}"/>
							</outline>
						<outline text=".divTabs li {">
							<outline text="width: 92px;"/>
							<outline text="}"/>
							</outline>
						<outline text=".divTabContent {">
							<outline text="margin-top: 20px;"/>
							<outline text="margin-left: 30px;"/>
							<outline text="margin-right: 30px;"/>
							<outline text="}"/>
							</outline>
						<outline text=".divLastBlogUpdate {">
							<outline text="display: none;"/>
							<outline text="}"/>
							</outline>
						<outline text=" #discuss {">
							<outline text="display: none;"/>
							<outline text="}"/>
							</outline>
						<outline text=".modal, .divTweetDialog { /*  1/23/19 by DW -- so the confirm dialog fits on iphone screens, per Dries's report */">
							<outline text="width: 90%;"/>
							<outline text="margin-left: auto;"/>
							<outline text="margin-right: auto;"/>
							<outline text="left: 5%;"/>
							<outline text="}"/>
							</outline>
						<outline text=".divTweetDialog { /*  1/23/19 by DW */">
							<outline text="width: 90%;"/>
							<outline text="margin-left: auto;"/>
							<outline text="margin-right: auto;"/>
							<outline text="}"/>
							</outline>
						<outline text=".divBidenAd {">
							<outline text="position: fixed;"/>
							<outline text="top: 0;"/>
							<outline text="right: 0;"/>
							<outline text="opacity: .5;"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="/* styles for tablet */">
					<outline text="@media only screen and (min-device-width: 768px) and (max-device-width: 1024px) {">
						<outline text=".divPagetopText {">
							<outline text="top: 30;"/>
							<outline text="width: 100%;"/>
							<outline text="left: 0;"/>
							<outline text="padding-left: 0;"/>
							<outline text="height: 200px;" isComment="true"/>
							<outline text="color: white;" isComment="true"/>
							<outline text="padding-top: 3px;" isComment="true"/>
							<outline text="z-index: 2;" isComment="true"/>
							<outline text="}"/>
							</outline>
						<outline text=".divPagetopImage {">
							<outline text="height: 185px;"/>
							<outline text="}"/>
							</outline>
						<outline text=".divPageBody {">
							<outline text="width: 75%;"/>
							<outline text="margin-left: auto;"/>
							<outline text="margin-right: auto;"/>
							<outline text="margin-top: 230px;"/>
							<outline text="}"/>
							</outline>
						<outline text=".divLastBlogUpdate {">
							<outline text="display: none;"/>
							<outline text="}"/>
							</outline>
						<outline text=".divBidenAd {">
							<outline text="position: fixed;"/>
							<outline text="top: 0;"/>
							<outline text="right: 0;"/>
							<outline text="opacity: .5;"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					</outline>
				</outline>
			<outline text="templates/minimal/index.html">
				<outline text="&lt;html&gt;">
					<outline text="&lt;head&gt;">
						<outline text="&lt;title&gt;[%pagetitle%]&lt;/title&gt;"/>
						<outline text="&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;"/>
						<outline text="&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;"/>
						<outline text="" created="Thu, 02 Sep 2021 14:57:03 GMT"/>
						<outline text="[%rssLink%]"/>
						<outline text="[%facebookmetadata%]"/>
						<outline text="[%twittermetadata%]"/>
						<outline text="" created="Sun, 14 Apr 2024 15:11:43 GMT"/>
						<outline text="&lt;link href=&quot;//fonts.googleapis.com/css?family=Ubuntu:400,500i,700&quot; rel=&quot;stylesheet&quot;&gt;"/>
						<outline text="&lt;link rel=&quot;stylesheet&quot; href=&quot;//scripting.com/code/fontawesome/css/all.css&quot;&gt;"/>
						<outline text="&lt;link rel=&quot;stylesheet&quot; href=&quot;//fargo.io/code/editors/mediumeditor/dist/css/medium-editor.css&quot;&gt; "/>
						<outline text="&lt;link rel=&quot;stylesheet&quot; href=&quot;//fargo.io/code/editors/mediumeditor/dist/css/themes/default.css&quot;&gt; "/>
						<outline text="&lt;script src=&quot;//fargo.io/code/editors/mediumeditor/dist/js/medium-editor.js&quot;&gt;&lt;/script&gt;"/>
						<outline text="&lt;script src=&quot;//scripting.com/code/includes/jquery-1.9.1.min.js&quot;&gt;&lt;/script&gt;"/>
						<outline text="&lt;link href=&quot;//scripting.com/code/includes/bootstrap.css&quot; rel=&quot;stylesheet&quot;&gt;"/>
						<outline text="&lt;script src=&quot;//scripting.com/code/includes/bootstrap.min.js&quot;&gt;&lt;/script&gt;"/>
						<outline text="&lt;script src=&quot;//scripting.com/code/includes/basic/code.js&quot;&gt;&lt;/script&gt;" created="Thu, 08 May 2014 14:04:18 GMT" pgfnum="41269"/>
						<outline text="&lt;link href=&quot;//scripting.com/code/includes/basic/styles.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;"/>
						<outline text="&lt;link href=&quot;//radio3.io/code/pagestyles.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;"/>
						<outline text="&lt;script src=&quot;//scripting.com/code/tweeteditor/code.js&quot;&gt;&lt;/script&gt;"/>
						<outline text="&lt;script src=&quot;//scripting.com/code/nodestorage/api.js&quot;&gt;&lt;/script&gt;"/>
						<outline text="&lt;script src=&quot;//scripting.com/code/imageclick/dialog.js&quot;&gt;&lt;/script&gt;" created="Thu, 08 May 2014 14:04:18 GMT" pgfnum="41269"/>
						<outline text="&lt;script src=&quot;//scripting.com/code/xml/code.js&quot;&gt;&lt;/script&gt;"/>
						<outline text="&lt;script src=&quot;http://scripting.com/code/emojify/code.js&quot;&gt;&lt;/script&gt;"/>
						<outline text="&lt;link rel=&quot;stylesheet&quot; href=&quot;http://scripting.com/code/emojify/styles.css&quot;/&gt;"/>
						<outline text="&lt;script src=&quot;//scripting.com/code/tagrefdialog/dialog.js&quot;&gt;&lt;/script&gt;"/>
						<outline text="&lt;script src=&quot;//scripting.com/code/opmlpackage/client/opml.js&quot;&gt;&lt;/script&gt;"/>
						<outline text="&lt;script src=&quot;//scripting.com/code/outlinebrowser/code.js&quot;&gt;&lt;/script&gt;"/>
						<outline text="&lt;link href=&quot;//scripting.com/code/outlinebrowser/styles.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;"/>
						<outline text="" created="Sun, 14 Apr 2024 15:20:38 GMT"/>
						<outline text="&lt;!-- This stuff is needed for blogroll -- 4/14/24 by DW --&gt;" created="Wed, 28 Feb 2024 15:12:34 GMT">
							<outline text="&lt;script src=&quot;//s3.amazonaws.com/scripting.com/code/feedland/home/api.js&quot;&gt;&lt;/script&gt;"/>
							<outline text="&lt;script src=&quot;//s3.amazonaws.com/scripting.com/code/feedland/home/misc.js&quot;&gt;&lt;/script&gt;"/>
							<outline text="&lt;link href=&quot;//s3.amazonaws.com/scripting.com/code/feedland/home/misc.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;"/>
							<outline text="&lt;link href=&quot;//s3.amazonaws.com/scripting.com/code/feedland/home/mobile.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;"/>
							<outline text="&lt;link href=&quot;https://code.scripting.com/blogroll/blogroll.css&quot; rel=&quot;stylesheet&quot;&gt;"/>
							<outline text="&lt;script src=&quot;https://code.scripting.com/blogroll/blogroll.js&quot;&gt;&lt;/script&gt;"/>
							</outline>
						<outline text="" created="Sun, 14 Apr 2024 15:20:39 GMT"/>
						<outline text="&lt;link href=&quot;//scripting.com/code/drummercms/templates/minimal/styles.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;"/>
						<outline text="&lt;script src=&quot;//scripting.com/code/drummercms/templates/minimal/code.js&quot;&gt;&lt;/script&gt;"/>
						<outline text="" created="Wed, 01 Sep 2021 14:52:22 GMT"/>
						<outline text="&lt;script&gt;" created="Thu, 12 Dec 2013 17:06:51 GMT" pgfnum="33502">
							<outline text="var config = [%configJson%];"/>
							<outline text="var opmlHead = [%opmlHead%];"/>
							<outline text="var aboutOutline = [%aboutOutline%]; //10/18/21 by DW" created="Mon, 18 Oct 2021 15:47:31 GMT"/>
							<outline text="&lt;/script&gt;" created="Thu, 12 Dec 2013 17:07:17 GMT" pgfnum="33504"/>
							</outline>
						<outline text="&lt;/head&gt;"/>
						</outline>
					<outline text="&lt;body&gt;">
						<outline text="&lt;div id=&quot;idTweetDialog&quot; class=&quot;modal hide fade divTweetDialog&quot;&gt;">
							<outline text="&lt;div class=&quot;divTweetDialogContainer&quot;&gt;">
								<outline text="&lt;div id=&quot;idMyTweetEditor&quot;&gt;">
									<outline text="&lt;/div&gt;"/>
									</outline>
								<outline text="&lt;/div&gt;"/>
								</outline>
							<outline text="&lt;/div&gt;"/>
							</outline>
						<outline text="&lt;div class=&quot;divToggleConnect&quot;&gt;&lt;a onclick=&quot;toggleTwitterConnect ();&quot; id=&quot;idToggleConnect&quot;&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp;&lt;/div&gt;"/>
						<outline text="&lt;div class=&quot;divVersionNumber&quot; id=&quot;idVersionNumber&quot;&gt;">
							<outline text="&lt;/div&gt;"/>
							</outline>
						<outline text="&lt;div class=&quot;divPagetop&quot;&gt;">
							<outline text="[%pagetop%]"/>
							<outline text="&lt;/div&gt;"/>
							</outline>
						<outline text="&lt;div class=&quot;divPageBody&quot;&gt;">
							<outline text="&lt;div class=&quot;divTabsPage&quot; id=&quot;idTabsPage&quot; stylex=&quot;display: none&quot;&gt;">
								<outline text="&lt;div class=&quot;divTabs&quot; id=&quot;idTabs&quot;&gt;">
									<outline text="&lt;div class=&quot;divLastBlogUpdate&quot; id=&quot;idLastBlogUpdate&quot;&gt;">
										<outline text="&lt;/div&gt;"/>
										</outline>
									<outline text="&lt;ul id=&quot;idTabList&quot; class=&quot;nav nav-tabs&quot;&gt;">
										<outline text="&lt;/ul&gt;"/>
										</outline>
									<outline text="&lt;/div&gt;"/>
									</outline>
								<outline text="" created="Wed, 01 Sep 2021 17:47:48 GMT"/>
								<outline text="&lt;div class=&quot;divTabContentContainer&quot;&gt;">
									<outline text="&lt;div class=&quot;divTabContent&quot; id=&quot;idTabContent&quot;&gt;">
										<outline text="[%bodytext%]" created="Wed, 01 Sep 2021 15:48:45 GMT"/>
										<outline text="&lt;/div&gt;"/>
										</outline>
									<outline text="&lt;/div&gt;"/>
									</outline>
								<outline text="" created="Wed, 01 Sep 2021 17:47:48 GMT"/>
								<outline text="&lt;div class=&quot;divMoreButton&quot;&gt;" isComment="true">
									<outline text="&lt;button id=&quot;idMoreButton&quot;  class=&quot;btn&quot; type=&quot;button&quot; onclick=&quot;moreButtonClick ();&quot; style=&quot;display: none;&quot;&gt;More&lt;/button&gt;" created="Tue, 06 May 2014 16:58:36 GMT" pgfnum="41161"/>
									<outline text="&lt;/div&gt;"/>
									</outline>
								<outline text="&lt;/div&gt;"/>
								</outline>
							<outline text="" created="Sun, 14 Apr 2024 15:30:12 GMT"/>
							<outline text="&lt;div class=&quot;divSpacerCell&quot;&gt;" created="Tue, 27 Feb 2024 19:36:40 GMT">
								<outline text="&lt;/div&gt;" created="Tue, 27 Feb 2024 19:36:55 GMT"/>
								</outline>
							<outline text="&lt;div class=&quot;divSidebar&quot;&gt;" created="Tue, 27 Feb 2024 19:26:10 GMT">
								<outline text="&lt;div class=&quot;divBlogrollContainer&quot; id=&quot;idBlogrollContainer&quot; tabindex=&quot;0&quot;&gt;">
									<outline text="&lt;/div&gt;" created="Wed, 28 Feb 2024 15:14:14 GMT"/>
									</outline>
								<outline text="&lt;/div&gt;" created="Tue, 27 Feb 2024 19:26:25 GMT"/>
								</outline>
							<outline text="" created="Sun, 14 Apr 2024 15:30:12 GMT"/>
							<outline text="&lt;div class=&quot;divDayContainer&quot; id=&quot;idDayContainer&quot; style=&quot;display: none&quot;&gt;">
								<outline text="[%bodytext%]"/>
								<outline text="&lt;/div&gt;"/>
								</outline>
							<outline text="&lt;div class=&quot;divFooter&quot;&gt;">
								<outline text="&lt;p&gt;[%copyright%]&lt;/p&gt;"/>
								<outline text="&lt;p&gt;Last update: &lt;span id=&quot;idLastUpdateStringInFooter&quot;&gt;[%now%]&lt;/span&gt;.&lt;/p&gt;"/>
								<outline text="[%socialMediaLinks%]"/>
								<outline text="&lt;/div&gt;"/>
								</outline>
							<outline text="&lt;/div&gt;"/>
							</outline>
						<outline text="&lt;script&gt;">
							<outline text="$(document).ready (function () {">
								<outline text="startup ();" created="Wed, 30 Oct 2013 15:20:06 GMT" pgfnum="30656"/>
								<outline text="});"/>
								</outline>
							<outline text="&lt;/script&gt;"/>
							</outline>
						<outline text="&lt;/body&gt;"/>
						</outline>
					<outline text="&lt;/html&gt;"/>
					</outline>
				</outline>
			<outline text="" created="Thu, 02 Sep 2021 19:42:23 GMT"/>
			<outline text="readme.md" created="Tue, 24 Aug 2021 15:39:16 GMT">
				<outline text="# drummerCms">
					<outline text="A shell for Old School to connect it with Drummer. Released so other outliners can hook up to Old School for blogging."/>
					</outline>
				<outline text="### Overview" created="Tue, 24 Aug 2021 15:49:07 GMT">
					<outline text="As promised, here's the open source release of drummerCMS. It's the app that gets called when you build a blog from within Drummer. "/>
					<outline text="It's a small shell for the much larger &lt;a href=&quot;https://github.com/scripting/oldSchoolBlog&quot;&gt;oldSchoolBlog&lt;/a&gt; package to connect it with Drummer. Released so other outliners can hook up to Old School for blogging."/>
					<outline text="You'll see there's not much there. It builds a config struct for the blog. It can do this because it knows where the user's blog.opml file is located. It would likely be in a different location for another product. "/>
					<outline text="The heart of the app is &lt;a href=&quot;https://github.com/scripting/drummerCms/blob/main/drummercms.js#L40&quot;&gt;initBlogConfig&lt;/a&gt;. "/>
					<outline text="An example of a &lt;a href=&quot;http://drummer.scripting.com/cluelessnewbie/blog.opml&quot;&gt;blog.opml&lt;/a&gt; file."/>
					<outline text="The &lt;a href=&quot;https://github.com/scripting/drummerCms&quot;&gt;repo&lt;/a&gt; is open, use the &lt;a href=&quot;https://github.com/scripting/drummerCms/issues&quot;&gt;Issues section&lt;/a&gt; to discuss. "/>
					</outline>
				<outline text="### Updates" created="Thu, 02 Sep 2021 19:43:15 GMT">
					<outline text="See the &lt;a href=&quot;worknotes.md&quot;&gt;worknotes.md&lt;/a&gt; page." created="Thu, 20 Apr 2023 16:06:41 GMT"/>
					</outline>
				</outline>
			<outline text="" created="Thu, 02 Sep 2021 19:50:01 GMT"/>
			<outline text="config.json" isComment="true">
				<outline text="{">
					<outline text="}"/>
					</outline>
				</outline>
			</outline>
		<outline text="/oldschool.scripting.com/" created="Tue, 10 Aug 2021 14:26:37 GMT">
			<outline text="index.html" created="Tue, 10 Aug 2021 14:26:46 GMT">
				<outline text="&lt;html&gt;">
					<outline text="&lt;head&gt;">
						<outline text="&lt;title&gt;oldschool.scripting.com&lt;/title&gt; "/>
						<outline text="&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;"/>
						<outline text="&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;"/>
						<outline text="&lt;%basicIncludes2%&gt;"/>
						<outline text="&lt;script src=&quot;code.js&quot;&gt;&lt;/script&gt;"/>
						<outline text="&lt;style&gt;" created="Wed, 11 Sep 2013 14:27:45 GMT" pgfnum="30095">
							<outline text="body {">
								<outline text="font-family: Ubuntu;"/>
								<outline text="font-size: 18px;"/>
								<outline text="background-color: whitesmoke;"/>
								<outline text="}"/>
								</outline>
							<outline text=".divPageBody {">
								<outline text="width: 60%;"/>
								<outline text="margin-top: 90px;"/>
								<outline text="margin-left: auto;"/>
								<outline text="margin-right: auto;"/>
								<outline text="}"/>
								</outline>
							<outline text=".divPageTitle {" created="Sun, 28 Mar 2021 16:48:44 GMT">
								<outline text="font-size: 36px;" created="Sun, 28 Mar 2021 16:47:30 GMT"/>
								<outline text="line-height: 140%" created="Sun, 28 Mar 2021 16:49:02 GMT"/>
								<outline text="}" created="Sun, 28 Mar 2021 16:48:47 GMT"/>
								</outline>
							<outline text="table {" created="Sun, 28 Mar 2021 16:47:28 GMT">
								<outline text="font-size: 24px;" created="Sun, 28 Mar 2021 16:47:30 GMT"/>
								<outline text="line-height: 150%;" created="Sun, 28 Mar 2021 16:49:02 GMT"/>
								<outline text="margin-top: 15px;" created="Sun, 28 Mar 2021 23:40:29 GMT"/>
								<outline text="}" created="Sun, 28 Mar 2021 16:47:36 GMT"/>
								</outline>
							<outline text="td {" created="Sun, 28 Mar 2021 23:20:34 GMT">
								<outline text="padding-right: 12px;" created="Sun, 28 Mar 2021 23:20:38 GMT"/>
								<outline text="}" created="Sun, 28 Mar 2021 23:20:46 GMT"/>
								</outline>
							<outline text="p {" created="Sun, 28 Mar 2021 23:39:33 GMT">
								<outline text="margin-top: 25px;" created="Sun, 28 Mar 2021 23:39:34 GMT"/>
								<outline text="font-size: 16px;"/>
								<outline text="}" created="Sun, 28 Mar 2021 23:39:39 GMT"/>
								</outline>
							<outline text="&lt;/style&gt;" created="Wed, 11 Sep 2013 14:30:17 GMT" pgfnum="30105"/>
							</outline>
						<outline text="&lt;/head&gt;"/>
						</outline>
					<outline text="&lt;body&gt;">
						<outline text="&lt;div class=&quot;divPageBody&quot;&gt;">
							<outline text="&lt;h3 style=&quot;text-align: center&quot;&gt;~ oldschool.scripting.com ~&lt;/h3&gt;"/>
							<outline text="&lt;p style=&quot;text-align: center&quot;&gt;This is where we hook Drummer up to Old School blogging.&lt;/p&gt;" created="Tue, 10 Aug 2021 14:29:02 GMT"/>
							<outline text="&lt;/div&gt;"/>
							</outline>
						<outline text="&lt;script&gt;">
							<outline text="$(document).ready (function () {">
								<outline text="startup ();" created="Wed, 30 Oct 2013 15:20:06 GMT" pgfnum="30656"/>
								<outline text="});"/>
								</outline>
							<outline text="&lt;/script&gt;"/>
							</outline>
						<outline text="&lt;/body&gt;"/>
						</outline>
					<outline text="&lt;/html&gt;"/>
					</outline>
				</outline>
			</outline>
		<outline text="build script" created="Mon, 09 Aug 2021 15:15:20 GMT">
			<outline text="nodeEditorSuite.utilities.buildDrummerCms ()"/>
			</outline>
		</body>
	</opml>
